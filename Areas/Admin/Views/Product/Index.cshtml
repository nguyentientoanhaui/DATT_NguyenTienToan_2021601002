@model IEnumerable<ProductModel>
@{
    ViewData["title"] = "Danh sách đồng hồ";
}

<style>
    /* Modern Layout */
    .modern-container {
        padding: 2rem;
        background: #fafafa;
        min-height: 100vh;
    }

    .page-header {
        background: var(--white);
        padding: 2rem;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.04);
        margin-bottom: 2rem;
        border: none;
    }

    .page-title {
        color: var(--primary-black);
        font-weight: 700;
        font-size: 2rem;
        margin: 0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        letter-spacing: -0.5px;
    }

    .search-results-info {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-top: 1rem;
        padding: 0.75rem 1rem;
        background: #e3f2fd;
        border: 1px solid #bbdefb;
        border-radius: 8px;
        font-size: 0.875rem;
    }

    .search-term {
        color: #1976d2;
        font-weight: 500;
    }

    .clear-search {
        color: #1976d2;
        text-decoration: none;
        font-weight: 600;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        transition: all 0.2s ease;
    }

    .clear-search:hover {
        background: #bbdefb;
        color: #0d47a1;
    }

    .header-actions {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-top: 1rem;
    }

    .btn-primary {
        background: var(--primary-black);
        color: var(--white);
        border: none;
        border-radius: 8px;
        font-weight: 600;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        padding: 0.75rem 1.5rem;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-primary:hover {
        background: var(--secondary-black);
        color: var(--white);
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }

    .search-container {
        position: relative;
        flex: 1;
        max-width: 400px;
    }

    .search-form {
        position: relative;
        width: 100%;
    }

    .search-input {
        width: 100%;
        padding: 0.75rem 1rem 0.75rem 2.5rem;
        border: 1px solid var(--border-color);
        border-radius: 8px;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: var(--white);
        transition: all 0.3s ease;
    }

    .search-input:focus {
        outline: none;
        border-color: var(--primary-black);
        box-shadow: 0 0 0 3px rgba(0,0,0,0.1);
    }

    .search-icon {
        position: absolute;
        left: 0.75rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--medium-gray);
    }

    /* Modern Table */
    .table-container {
        background: var(--white);
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.04);
        overflow: hidden;
    }

    .table {
        background: var(--white);
        border: none;
        margin: 0;
    }

    .table th {
        background: #f8f9fa;
        color: var(--primary-black);
        font-weight: 600;
        border: none;
        padding: 1.25rem 1rem;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-size: 0.875rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .table td {
        color: var(--primary-black);
        font-weight: 500;
        border: none;
        border-bottom: 1px solid #f0f0f0;
        padding: 1.25rem 1rem;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        vertical-align: middle;
    }

    .table tbody tr:hover {
        background: #fafafa;
        transition: all 0.2s ease;
    }

    /* Product Image */
    .product-image-container {
        position: relative;
        width: 60px;
        height: 60px;
        border-radius: 8px;
        overflow: hidden;
        background: #f8f9fa;
    }

    .product-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 8px;
    }

    .image-fallback {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
        height: 100%;
        background: #f8f9fa;
        color: var(--medium-gray);
        font-size: 0.75rem;
        font-weight: 500;
    }

    /* Badges and Status */
    .badge {
        background: #f8f9fa !important;
        color: var(--primary-black) !important;
        border: 1px solid var(--border-color);
        border-radius: 6px;
        font-weight: 500;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        padding: 0.375rem 0.75rem;
        font-size: 0.75rem;
    }

    .status-badge {
        background: #e8f5e8 !important;
        color: #2d5a2d !important;
        border: 1px solid #c3e6c3;
    }

    .status-badge.hidden {
        background: #fff3cd !important;
        color: #856404 !important;
        border: 1px solid #ffeaa7;
    }

    /* Action Buttons */
    .action-buttons {
        display: flex;
        gap: 0.5rem;
        align-items: center;
        justify-content: center;
        min-width: 120px;
        flex-wrap: nowrap;
    }

    .btn-warning, .btn-success, .btn-outline-primary, .btn-outline-info {
        background: transparent;
        color: var(--primary-black);
        border: 1px solid var(--border-color);
        border-radius: 6px;
        font-weight: 500;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        padding: 0.5rem 0.75rem;
        font-size: 0.9rem;
        transition: all 0.2s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        min-width: 32px;
        min-height: 32px;
        white-space: nowrap;
    }

    .btn-warning:hover, .btn-success:hover, .btn-outline-primary:hover, .btn-outline-info:hover {
        background: var(--light-gray);
        color: var(--primary-black);
        border: 1px solid var(--border-color);
        transform: translateY(-1px);
    }

    /* Specific button styling for better visibility */
    .btn-outline-info {
        background: #e3f2fd;
        border-color: #2196f3;
        color: #1976d2;
    }

    .btn-outline-info:hover {
        background: #bbdefb;
        border-color: #1976d2;
        color: #0d47a1;
    }

    .btn-outline-primary {
        background: #fff3e0;
        border-color: #ff9800;
        color: #f57c00;
    }

    .btn-outline-primary:hover {
        background: #ffe0b2;
        border-color: #f57c00;
        color: #e65100;
    }

    .btn-warning {
        background: #fff3cd;
        border-color: #ffc107;
        color: #856404;
    }

    .btn-warning:hover {
        background: #ffeaa7;
        border-color: #856404;
        color: #533f03;
    }

    .btn-success {
        background: #d4edda;
        border-color: #28a745;
        color: #155724;
    }

    .btn-success:hover {
        background: #c3e6cb;
        border-color: #155724;
        color: #0b2e13;
    }

    /* Product Info */
    .product-name {
        font-weight: 600;
        color: var(--primary-black);
        margin-bottom: 0.25rem;
        line-height: 1.4;
    }

    .product-ref {
        font-size: 0.75rem;
        color: var(--medium-gray);
        font-weight: 400;
    }

    .price {
        font-weight: 600;
        color: var(--primary-black);
        font-size: 1rem;
    }

    .stock-info {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }

    .stock-number {
        font-weight: 600;
        color: var(--primary-black);
    }

    .stock-label {
        font-size: 0.75rem;
        color: var(--medium-gray);
        font-weight: 400;
    }

    /* Pagination */
    .pagination-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.5rem 2rem;
        background: var(--white);
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.04);
        margin-top: 2rem;
    }

    .pagination-info {
        color: var(--medium-gray);
        font-size: 0.875rem;
        font-weight: 500;
    }

    .pagination {
        display: flex;
        gap: 0.5rem;
        align-items: center;
        margin: 0;
        padding: 0;
        list-style: none;
    }

    .page-item {
        margin: 0;
    }

    .page-link {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
        border: 1px solid var(--border-color);
        border-radius: 8px;
        color: var(--primary-black);
        text-decoration: none;
        font-weight: 500;
        font-size: 0.875rem;
        transition: all 0.2s ease;
        background: var(--white);
    }

    .page-link:hover {
        background: var(--light-gray);
        border-color: var(--primary-black);
        color: var(--primary-black);
        transform: translateY(-1px);
    }

    .page-item.active .page-link {
        background: var(--primary-black);
        color: var(--white);
        border-color: var(--primary-black);
    }

    .page-item.disabled .page-link {
        color: var(--medium-gray);
        background: #f8f9fa;
        border-color: var(--border-color);
        cursor: not-allowed;
        transform: none;
    }

    .page-item.disabled .page-link:hover {
        background: #f8f9fa;
        border-color: var(--border-color);
        transform: none;
    }

    .page-size-selector {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .page-size-selector label {
        color: var(--medium-gray);
        font-size: 0.875rem;
        font-weight: 500;
        margin: 0;
    }

    .page-size-selector select {
        padding: 0.5rem;
        border: 1px solid var(--border-color);
        border-radius: 6px;
        background: var(--white);
        color: var(--primary-black);
        font-size: 0.875rem;
        font-weight: 500;
    }

    .page-size-selector select:focus {
        outline: none;
        border-color: var(--primary-black);
        box-shadow: 0 0 0 3px rgba(0,0,0,0.1);
    }

    /* Table styling */
    .table-responsive {
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
    }

    .product-table {
        min-width: 100%;
        table-layout: auto;
    }

    .product-table td:last-child,
    .product-table th:last-child {
        position: sticky;
        right: 0;
        background: var(--white);
        z-index: 10;
        border-left: 1px solid var(--border-color);
        min-width: 140px;
        width: 140px;
    }

    /* Ensure action buttons are always visible */
    .action-buttons {
        visibility: visible !important;
        opacity: 1 !important;
        display: flex !important;
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .modern-container {
            padding: 1rem;
        }
        
        .header-actions {
            flex-direction: column;
            align-items: stretch;
        }

        .action-buttons {
            gap: 0.25rem;
        }

        .btn-warning, .btn-success, .btn-outline-primary, .btn-outline-info {
            padding: 0.4rem 0.6rem;
            font-size: 0.8rem;
            min-width: 28px;
            min-height: 28px;
        }
        
        .search-container {
            max-width: none;
        }
    }
</style>

<div class="modern-container">
    <div class="page-header">
        <h1 class="page-title">Danh sách đồng hồ cao cấp</h1>
        @if (!string.IsNullOrEmpty(ViewBag.SearchTerm))
        {
            <div class="search-results-info">
                <span class="search-term">Kết quả tìm kiếm cho: "<strong>@ViewBag.SearchTerm</strong>"</span>
                <a href="@Url.Action("Index")" class="clear-search">Xóa bộ lọc</a>
            </div>
        }
        <div class="header-actions">
            <a asp-action="Create" class="btn-primary">
                <i class="fas fa-plus"></i>
                Thêm đồng hồ mới
            </a>
            <div class="search-container">
                <form method="get" action="@Url.Action("Index")" class="search-form">
                    <i class="fas fa-search search-icon"></i>
                    <input type="text" name="search" class="search-input" placeholder="Tìm kiếm đồng hồ..." value="@ViewBag.SearchTerm" />
                    <input type="hidden" name="page" value="1" />
                    <input type="hidden" name="pageSize" value="@ViewBag.PageSize" />
                </form>
            </div>
        </div>
    </div>

    <div class="table-container">
        <table class="table product-table">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Tên đồng hồ</th>
                    <th>Model</th>
                    <th>Thương hiệu</th>
                    <th>Danh mục</th>
                    <th>Tình trạng</th>
                    <th>Giới tính</th>
                    <th>Case Size</th>
                    <th>Giá bán</th>
                    <th>Tồn kho</th>
                    <th>Đã bán</th>
                    <th>Hình ảnh</th>
                    <th>Trạng thái</th>
                    <th style="min-width: 140px; width: 140px;">Thao tác</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>
                            <div>
                                <div class="product-name">@item.Name</div>
                                <div class="product-ref">ID: @item.Id</div>
                            </div>
                        </td>
                        <td>@item.Model</td>
                        <td>@item.Brand?.Name</td>
                        <td>@item.Category?.Name</td>
                        <td><span class="badge">@item.Condition</span></td>
                        <td><span class="badge">@item.Gender</span></td>
                        <td>@item.CaseSize</td>
                        <td class="price">@item.Price.ToString("N0") VNĐ</td>
                        <td>
                            <div class="stock-info">
                                <span class="stock-number">@item.Quantity</span>
                                <span class="stock-label">trong kho</span>
                            </div>
                        </td>
                        <td>
                            <div class="stock-info">
                                <span class="stock-number">@item.Sold</span>
                                <span class="stock-label">đã bán</span>
                            </div>
                        </td>
                        <td>
                            <div class="product-image-container">
                                @{
                                    var mainImage = item.Image;
                                    var additionalImages = item.ProductImages?.ToList();
                                    var totalImages = (additionalImages?.Count ?? 0) + (!string.IsNullOrEmpty(mainImage) ? 1 : 0);
                                }
                                
                                @if (!string.IsNullOrEmpty(mainImage))
                                {
                                    @if (mainImage.StartsWith("http"))
                                    {
                                        <img src="@mainImage" class="product-image" alt="@item.Name" 
                                             onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                                    }
                                    else
                                    {
                                        var imagePath = $"/media/products/{mainImage}";
                                        <img src="@imagePath" class="product-image" alt="@item.Name" 
                                             onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                                    }
                                    <div class="image-fallback" style="display:none;">
                                        <div>Không có ảnh</div>
                                    </div>
                                }
                                else if (additionalImages != null && additionalImages.Any())
                                {
                                    var firstImage = additionalImages.First();
                                    string imageSrc = "";
                                    
                                    if (!string.IsNullOrEmpty(firstImage.ImageUrl))
                                    {
                                        if (firstImage.ImageUrl.StartsWith("http"))
                                        {
                                            imageSrc = firstImage.ImageUrl;
                                        }
                                        else
                                        {
                                            imageSrc = $"/media/products/{firstImage.ImageUrl}";
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(firstImage.ImageName))
                                    {
                                        imageSrc = $"/media/products/{firstImage.ImageName}";
                                    }
                                    
                                    @if (!string.IsNullOrEmpty(imageSrc))
                                    {
                                        <img src="@imageSrc" class="product-image" alt="@item.Name" 
                                             onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                                        <div class="image-fallback" style="display:none;">
                                            <div>Không có ảnh</div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="image-fallback">
                                            <div>Không có ảnh</div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="image-fallback">
                                        <div>Không có ảnh</div>
                                    </div>
                                }
                                
                                @if (totalImages > 1)
                                {
                                    <div class="text-muted" style="position: absolute; bottom: 2px; right: 2px; background: rgba(255,255,255,0.9); padding: 1px 4px; border-radius: 4px; font-size: 0.7rem;">+@(totalImages - 1)</div>
                                }
                            </div>
                        </td>
                        <td>
                            <span class="badge status-badge @(item.IsActive ? "" : "hidden")">
                                @(item.IsActive ? "Đang hiển thị" : "Đã ẩn")
                            </span>
                        </td>
                        <td>
                            <div class="action-buttons">
                                <a asp-action="Details" asp-route-id="@item.Id" class="btn-outline-info" title="Xem chi tiết">
                                    <i class="fas fa-eye"></i>
                                </a>
                                <a asp-action="Edit" asp-route-id="@item.Id" class="btn-outline-primary" title="Chỉnh sửa">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <a asp-action="ToggleActive" asp-route-id="@item.Id" class="btn-@(item.IsActive ? "warning" : "success")" title="@(item.IsActive ? "Ẩn sản phẩm" : "Hiển thị sản phẩm")">
                                    <i class="fas fa-@(item.IsActive ? "eye-slash" : "eye")"></i>
                                </a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="pagination-container">
        <div class="pagination-info">
            @if (Model.Any())
            {
                var startItem = ((ViewBag.CurrentPage - 1) * ViewBag.PageSize) + 1;
                var endItem = Math.Min(ViewBag.CurrentPage * ViewBag.PageSize, ViewBag.TotalItems);
                <span>Hiển thị @startItem-@endItem trên tổng số @ViewBag.TotalItems sản phẩm</span>
            }
            else
            {
                <span>Không có sản phẩm nào</span>
            }
        </div>
        
        @if (ViewBag.TotalPages > 1)
        {
            <ul class="pagination">
                @* Previous button *@
                <li class="page-item @(ViewBag.HasPreviousPage ? "" : "disabled")">
                    @if (ViewBag.HasPreviousPage)
                    {
                        <a class="page-link" href="@Url.Action("Index", new { page = ViewBag.CurrentPage - 1, pageSize = ViewBag.PageSize, search = ViewBag.SearchTerm })">
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    }
                    else
                    {
                        <span class="page-link">
                            <i class="fas fa-chevron-left"></i>
                        </span>
                    }
                </li>

                @* Page numbers *@
                @{
                    var startPage = Math.Max(1, ViewBag.CurrentPage - 2);
                    var endPage = Math.Min(ViewBag.TotalPages, ViewBag.CurrentPage + 2);
                    
                    // Always show first page if not in range
                    if (startPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { page = 1, pageSize = ViewBag.PageSize, search = ViewBag.SearchTerm })">1</a>
                        </li>
                        if (startPage > 2)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        }
                    }
                    
                    for (int i = startPage; i <= endPage; i++)
                    {
                        <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                            @if (i == ViewBag.CurrentPage)
                            {
                                <span class="page-link">@i</span>
                            }
                            else
                            {
                                <a class="page-link" href="@Url.Action("Index", new { page = i, pageSize = ViewBag.PageSize, search = ViewBag.SearchTerm })">@i</a>
                            }
                        </li>
                    }
                    
                    // Always show last page if not in range
                    if (endPage < ViewBag.TotalPages)
                    {
                        if (endPage < ViewBag.TotalPages - 1)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        }
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { page = ViewBag.TotalPages, pageSize = ViewBag.PageSize, search = ViewBag.SearchTerm })">@ViewBag.TotalPages</a>
                        </li>
                    }
                }

                @* Next button *@
                <li class="page-item @(ViewBag.HasNextPage ? "" : "disabled")">
                    @if (ViewBag.HasNextPage)
                    {
                        <a class="page-link" href="@Url.Action("Index", new { page = ViewBag.CurrentPage + 1, pageSize = ViewBag.PageSize, search = ViewBag.SearchTerm })">
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    }
                    else
                    {
                        <span class="page-link">
                            <i class="fas fa-chevron-right"></i>
                        </span>
                    }
                </li>
            </ul>
        }
        
        <div class="page-size-selector">
            <label for="pageSize">Số lượng trên trang:</label>
            <select id="pageSize" onchange="changePageSize(this.value)">
                @if (ViewBag.PageSize == 10)
                {
                    <option value="10" selected>10</option>
                }
                else
                {
                    <option value="10">10</option>
                }
                @if (ViewBag.PageSize == 20)
                {
                    <option value="20" selected>20</option>
                }
                else
                {
                    <option value="20">20</option>
                }
                @if (ViewBag.PageSize == 50)
                {
                    <option value="50" selected>50</option>
                }
                else
                {
                    <option value="50">50</option>
                }
            </select>
        </div>
    </div>
</div>

<script>
    // Function to change page size
    function changePageSize(pageSize) {
        const url = new URL(window.location);
        url.searchParams.set('pageSize', pageSize);
        url.searchParams.set('page', '1'); // Reset to first page when changing page size
        window.location.href = url.toString();
    }

    // Search functionality
    document.addEventListener('DOMContentLoaded', function() {
        const searchInput = document.querySelector('.search-input');
        const searchForm = document.querySelector('.search-form');
        
        if (searchInput && searchForm) {
            let searchTimeout;
            
            // Real-time search with debouncing
            searchInput.addEventListener('input', function() {
                clearTimeout(searchTimeout);
                const searchTerm = this.value.trim();
                
                if (searchTerm.length >= 2 || searchTerm.length === 0) {
                    searchTimeout = setTimeout(() => {
                        searchForm.submit();
                    }, 500); // Wait 500ms after user stops typing
                }
            });
            
            // Also allow Enter key for immediate search
            searchInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    clearTimeout(searchTimeout);
                    searchForm.submit();
                }
            });
        }
    });
</script>