import pyodbc
import pandas as pd
import numpy as np
from datetime import datetime

class DatabaseVietnamizer:
    def __init__(self, connection_string):
        self.connection_string = connection_string
        self.conn = None
        
    def connect(self):
        """K·∫øt n·ªëi ƒë·∫øn database"""
        try:
            self.conn = pyodbc.connect(self.connection_string)
            print("‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!")
            return True
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
            return False
    
    def close(self):
        """ƒê√≥ng k·∫øt n·ªëi"""
        if self.conn:
            self.conn.close()
            print("üîí ƒê√£ ƒë√≥ng k·∫øt n·ªëi database")
    
    def check_current_data(self):
        """Ki·ªÉm tra d·ªØ li·ªáu hi·ªán t·∫°i"""
        try:
            cursor = self.conn.cursor()
            
            # Ki·ªÉm tra d·ªØ li·ªáu Products
            print("\nüìä KI·ªÇM TRA D·ªÆ LI·ªÜU HI·ªÜN T·∫†I:")
            print("=" * 50)
            
            # L·∫•y m·∫´u d·ªØ li·ªáu t·ª´ Products
            cursor.execute("""
                SELECT TOP 3 Id, Name, Condition, Gender, Certificate, WarrantyInfo, 
                       Price, CapitalPrice, CreditCardPrice
                FROM Products
            """)
            
            products = cursor.fetchall()
            print("üì¶ SAMPLE PRODUCTS:")
            for product in products:
                print(f"  ID: {product[0]}")
                print(f"  Name: {product[1]}")
                print(f"  Condition: {product[2]}")
                print(f"  Gender: {product[3]}")
                print(f"  Certificate: {product[4]}")
                print(f"  WarrantyInfo: {product[5]}")
                print(f"  Price: {product[6]}")
                print(f"  CapitalPrice: {product[7]}")
                print(f"  CreditCardPrice: {product[8]}")
                print("  " + "-" * 30)
            
            # Ki·ªÉm tra gi√° tr·ªã unique trong c√°c c·ªôt
            for column in ['Condition', 'Gender', 'Certificate', 'WarrantyInfo']:
                cursor.execute(f"SELECT DISTINCT {column} FROM Products WHERE {column} IS NOT NULL")
                values = [row[0] for row in cursor.fetchall()]
                print(f"\nüîç {column} unique values:")
                for value in values:
                    print(f"  - {value}")
            
            cursor.close()
            
        except Exception as e:
            print(f"‚ùå L·ªói ki·ªÉm tra d·ªØ li·ªáu: {e}")
    
    def vietnamize_products(self):
        """Vi·ªát h√≥a d·ªØ li·ªáu trong b·∫£ng Products"""
        try:
            cursor = self.conn.cursor()
            
            print("\nüáªüá≥ VI·ªÜT H√ìA D·ªÆ LI·ªÜU PRODUCTS:")
            print("=" * 50)
            
            # Mapping t·ª´ ti·∫øng Anh sang ti·∫øng Vi·ªát
            condition_mapping = {
                'Excellent': 'Xu·∫•t s·∫Øc',
                'Very Good': 'R·∫•t t·ªët',
                'Good': 'T·ªët',
                'Fair': 'Kh√°',
                'Poor': 'K√©m'
            }
            
            gender_mapping = {
                'Men': 'Nam',
                'Women': 'N·ªØ',
                'Unisex': 'Unisex'
            }
            
            certificate_mapping = {
                'Original Box': 'H·ªôp g·ªëc',
                'Original Papers': 'Gi·∫•y t·ªù g·ªëc',
                'Warranty Card': 'Th·∫ª b·∫£o h√†nh',
                'Service Book': 'S·ªï b·∫£o h√†nh',
                'No Papers': 'Kh√¥ng c√≥ gi·∫•y t·ªù',
                'Box and Papers': 'H·ªôp v√† gi·∫•y t·ªù',
                'Box Only': 'Ch·ªâ c√≥ h·ªôp',
                'Papers Only': 'Ch·ªâ c√≥ gi·∫•y t·ªù'
            }
            
            warranty_mapping = {
                '1 Year': '1 nƒÉm',
                '2 Years': '2 nƒÉm',
                '3 Years': '3 nƒÉm',
                '5 Years': '5 nƒÉm',
                'Lifetime': 'Tr·ªçn ƒë·ªùi',
                'No Warranty': 'Kh√¥ng b·∫£o h√†nh',
                'International Warranty': 'B·∫£o h√†nh qu·ªëc t·∫ø',
                'Manufacturer Warranty': 'B·∫£o h√†nh nh√† s·∫£n xu·∫•t'
            }
            
            # C·∫≠p nh·∫≠t Condition
            print("üîÑ C·∫≠p nh·∫≠t Condition...")
            for eng, vn in condition_mapping.items():
                cursor.execute("UPDATE Products SET Condition = ? WHERE Condition = ?", (vn, eng))
                affected = cursor.rowcount
                if affected > 0:
                    print(f"  {eng} ‚Üí {vn}: {affected} s·∫£n ph·∫©m")
            
            # C·∫≠p nh·∫≠t Gender
            print("üîÑ C·∫≠p nh·∫≠t Gender...")
            for eng, vn in gender_mapping.items():
                cursor.execute("UPDATE Products SET Gender = ? WHERE Gender = ?", (vn, eng))
                affected = cursor.rowcount
                if affected > 0:
                    print(f"  {eng} ‚Üí {vn}: {affected} s·∫£n ph·∫©m")
            
            # C·∫≠p nh·∫≠t Certificate
            print("üîÑ C·∫≠p nh·∫≠t Certificate...")
            for eng, vn in certificate_mapping.items():
                cursor.execute("UPDATE Products SET Certificate = ? WHERE Certificate = ?", (vn, eng))
                affected = cursor.rowcount
                if affected > 0:
                    print(f"  {eng} ‚Üí {vn}: {affected} s·∫£n ph·∫©m")
            
            # C·∫≠p nh·∫≠t WarrantyInfo
            print("üîÑ C·∫≠p nh·∫≠t WarrantyInfo...")
            for eng, vn in warranty_mapping.items():
                cursor.execute("UPDATE Products SET WarrantyInfo = ? WHERE WarrantyInfo = ?", (vn, eng))
                affected = cursor.rowcount
                if affected > 0:
                    print(f"  {eng} ‚Üí {vn}: {affected} s·∫£n ph·∫©m")
            
            # Chuy·ªÉn ƒë·ªïi gi√° t·ª´ USD sang VND (t·ª∑ gi√° 1 USD = 24,500 VND)
            print("üí∞ Chuy·ªÉn ƒë·ªïi gi√° t·ª´ USD sang VND...")
            cursor.execute("""
                UPDATE Products 
                SET Price = Price * 24500, 
                    CapitalPrice = CapitalPrice * 24500, 
                    CreditCardPrice = CreditCardPrice * 24500 
                WHERE Price > 0 AND Price < 100000
            """)
            affected = cursor.rowcount
            print(f"  ƒê√£ chuy·ªÉn ƒë·ªïi gi√° cho {affected} s·∫£n ph·∫©m")
            
            # Commit thay ƒë·ªïi
            self.conn.commit()
            print("‚úÖ ƒê√£ commit t·∫•t c·∫£ thay ƒë·ªïi!")
            
            cursor.close()
            
        except Exception as e:
            print(f"‚ùå L·ªói vi·ªát h√≥a Products: {e}")
            self.conn.rollback()
    
    def vietnamize_other_tables(self):
        """Vi·ªát h√≥a c√°c b·∫£ng kh√°c n·∫øu c·∫ßn"""
        try:
            cursor = self.conn.cursor()
            
            print("\nüáªüá≥ VI·ªÜT H√ìA C√ÅC B·∫¢NG KH√ÅC:")
            print("=" * 50)
            
            # Ki·ªÉm tra v√† vi·ªát h√≥a Categories n·∫øu c√≥
            cursor.execute("SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Categories'")
            if cursor.fetchone()[0] > 0:
                print("üîÑ Vi·ªát h√≥a Categories...")
                category_mapping = {
                    'Luxury': 'Xa x·ªâ',
                    'Sport': 'Th·ªÉ thao',
                    'Dress': 'C√¥ng s·ªü',
                    'Casual': 'Th∆∞·ªùng ng√†y',
                    'Smart': 'Th√¥ng minh'
                }
                
                for eng, vn in category_mapping.items():
                    cursor.execute("UPDATE Categories SET Name = ? WHERE Name = ?", (vn, eng))
                    affected = cursor.rowcount
                    if affected > 0:
                        print(f"  {eng} ‚Üí {vn}: {affected} danh m·ª•c")
            
            # Ki·ªÉm tra v√† vi·ªát h√≥a Brands n·∫øu c√≥
            cursor.execute("SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Brands'")
            if cursor.fetchone()[0] > 0:
                print("üîÑ Vi·ªát h√≥a Brands...")
                brand_mapping = {
                    'Rolex': 'Rolex',
                    'Omega': 'Omega',
                    'Cartier': 'Cartier',
                    'Patek Philippe': 'Patek Philippe',
                    'Audemars Piguet': 'Audemars Piguet'
                }
                
                for eng, vn in brand_mapping.items():
                    cursor.execute("UPDATE Brands SET Name = ? WHERE Name = ?", (vn, eng))
                    affected = cursor.rowcount
                    if affected > 0:
                        print(f"  {eng} ‚Üí {vn}: {affected} th∆∞∆°ng hi·ªáu")
            
            # Commit thay ƒë·ªïi
            self.conn.commit()
            print("‚úÖ ƒê√£ commit t·∫•t c·∫£ thay ƒë·ªïi!")
            
            cursor.close()
            
        except Exception as e:
            print(f"‚ùå L·ªói vi·ªát h√≥a c√°c b·∫£ng kh√°c: {e}")
            self.conn.rollback()
    
    def verify_changes(self):
        """X√°c minh c√°c thay ƒë·ªïi ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng"""
        try:
            cursor = self.conn.cursor()
            
            print("\n‚úÖ X√ÅC MINH THAY ƒê·ªîI:")
            print("=" * 50)
            
            # Ki·ªÉm tra d·ªØ li·ªáu sau khi vi·ªát h√≥a
            cursor.execute("""
                SELECT TOP 3 Id, Name, Condition, Gender, Certificate, WarrantyInfo, 
                       Price, CapitalPrice, CreditCardPrice
                FROM Products
            """)
            
            products = cursor.fetchall()
            print("üì¶ SAMPLE PRODUCTS SAU VI·ªÜT H√ìA:")
            for product in products:
                print(f"  ID: {product[0]}")
                print(f"  Name: {product[1]}")
                print(f"  Condition: {product[2]}")
                print(f"  Gender: {product[3]}")
                print(f"  Certificate: {product[4]}")
                print(f"  WarrantyInfo: {product[5]}")
                print(f"  Price: {product[6]:,.0f} VND")
                print(f"  CapitalPrice: {product[7]:,.0f} VND")
                print(f"  CreditCardPrice: {product[8]:,.0f} VND")
                print("  " + "-" * 30)
            
            # Ki·ªÉm tra gi√° tr·ªã unique sau vi·ªát h√≥a
            for column in ['Condition', 'Gender', 'Certificate', 'WarrantyInfo']:
                cursor.execute(f"SELECT DISTINCT {column} FROM Products WHERE {column} IS NOT NULL")
                values = [row[0] for row in cursor.fetchall()]
                print(f"\nüîç {column} unique values sau vi·ªát h√≥a:")
                for value in values:
                    print(f"  - {value}")
            
            cursor.close()
            
        except Exception as e:
            print(f"‚ùå L·ªói x√°c minh: {e}")
    
    def run_vietnamization(self):
        """Ch·∫°y to√†n b·ªô qu√° tr√¨nh vi·ªát h√≥a"""
        print("üöÄ B·∫ÆT ƒê·∫¶U VI·ªÜT H√ìA D·ªÆ LI·ªÜU")
        print("=" * 60)
        
        if not self.connect():
            return False
        
        try:
            # Ki·ªÉm tra d·ªØ li·ªáu hi·ªán t·∫°i
            self.check_current_data()
            
            # Vi·ªát h√≥a Products
            self.vietnamize_products()
            
            # Vi·ªát h√≥a c√°c b·∫£ng kh√°c
            self.vietnamize_other_tables()
            
            # X√°c minh thay ƒë·ªïi
            self.verify_changes()
            
            print("\nüéâ VI·ªÜT H√ìA HO√ÄN T·∫§T!")
            print("=" * 60)
            print("‚úÖ T·∫•t c·∫£ d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c vi·ªát h√≥a th√†nh c√¥ng")
            print("‚úÖ Gi√° ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi t·ª´ USD sang VND")
            print("‚úÖ C·ªôt Name ƒë∆∞·ª£c gi·ªØ nguy√™n nh∆∞ y√™u c·∫ßu")
            
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói trong qu√° tr√¨nh vi·ªát h√≥a: {e}")
            return False
        finally:
            self.close()

def main():
    # Connection string
    connection_string = "DRIVER={SQL Server};SERVER=localhost;DATABASE=Shopping_Demo;Trusted_Connection=yes;"
    
    # T·∫°o instance v√† ch·∫°y vi·ªát h√≥a
    vietnamizer = DatabaseVietnamizer(connection_string)
    success = vietnamizer.run_vietnamization()
    
    if success:
        print("\nüéØ K·∫æT QU·∫¢: Vi·ªát h√≥a th√†nh c√¥ng!")
    else:
        print("\nüí• K·∫æT QU·∫¢: Vi·ªát h√≥a th·∫•t b·∫°i!")

if __name__ == "__main__":
    main()
