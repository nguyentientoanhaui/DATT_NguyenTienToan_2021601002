#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Fix Collation Direct
S·ª≠a collation tr·ª±c ti·∫øp cho b·∫£ng Products
"""

import pyodbc

def main():
    print("üîß S·ª¨A COLLATION TR·ª∞C TI·∫æP")
    print("=" * 50)
    
    # Connection string
    connection_string = (
        "DRIVER={SQL Server};"
        "SERVER=localhost;"
        "DATABASE=Shopping_Demo;"
        "Trusted_Connection=yes;"
    )
    
    try:
        print("üîó ƒêang k·∫øt n·ªëi database...")
        conn = pyodbc.connect(connection_string)
        cursor = conn.cursor()
        print("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!")
        
        # B∆∞·ªõc 1: Backup
        print("\n1Ô∏è‚É£ BACKUP D·ªÆ LI·ªÜU")
        print("-" * 30)
        
        from datetime import datetime
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_table = f"Products_Backup_{timestamp}"
        
        backup_sql = f"SELECT * INTO {backup_table} FROM Products"
        cursor.execute(backup_sql)
        conn.commit()
        print(f"‚úÖ ƒê√£ backup th√†nh {backup_table}")
        
        # B∆∞·ªõc 2: T·∫°o b·∫£ng temp v·ªõi collation ƒë√∫ng
        print("\n2Ô∏è‚É£ T·∫†O B·∫¢NG TEMP V·ªöI COLLATION ƒê√öNG")
        print("-" * 30)
        
        # X√≥a b·∫£ng temp n·∫øu t·ªìn t·∫°i
        try:
            cursor.execute("DROP TABLE Products_Temp")
            conn.commit()
            print("üóëÔ∏è ƒê√£ x√≥a b·∫£ng temp c≈©")
        except:
            pass
        
        # T·∫°o b·∫£ng temp v·ªõi collation Vietnamese_CI_AS
        create_table_sql = """
        CREATE TABLE Products_Temp (
            Id INT IDENTITY(1,1) PRIMARY KEY,
            Name NVARCHAR(MAX) COLLATE Vietnamese_CI_AS,
            Slug NVARCHAR(MAX) COLLATE Vietnamese_CI_AS,
            Description NVARCHAR(MAX) COLLATE Vietnamese_CI_AS,
            Price DECIMAL(18,2),
            BrandId INT,
            CategoryId INT,
            Image NVARCHAR(MAX),
            Quantity INT,
            Sold INT,
            CapitalPrice DECIMAL(18,2),
            IsActive BIT,
            Model NVARCHAR(100) COLLATE Vietnamese_CI_AS,
            ModelNumber NVARCHAR(100),
            Year INT,
            Gender NVARCHAR(100) COLLATE Vietnamese_CI_AS,
            Condition NVARCHAR(400) COLLATE Vietnamese_CI_AS,
            CaseMaterial NVARCHAR(200) COLLATE Vietnamese_CI_AS,
            CaseSize NVARCHAR(40),
            Crystal NVARCHAR(100),
            BezelMaterial NVARCHAR(200) COLLATE Vietnamese_CI_AS,
            SerialNumber NVARCHAR(200),
            DialColor NVARCHAR(100) COLLATE Vietnamese_CI_AS,
            HourMarkers NVARCHAR(200) COLLATE Vietnamese_CI_AS,
            Calibre NVARCHAR(100) COLLATE Vietnamese_CI_AS,
            MovementType NVARCHAR(100) COLLATE Vietnamese_CI_AS,
            Complication NVARCHAR(200) COLLATE Vietnamese_CI_AS,
            BraceletMaterial NVARCHAR(200) COLLATE Vietnamese_CI_AS,
            BraceletType NVARCHAR(100) COLLATE Vietnamese_CI_AS,
            ClaspType NVARCHAR(100) COLLATE Vietnamese_CI_AS,
            BoxAndPapers BIT,
            Certificate NVARCHAR(200) COLLATE Vietnamese_CI_AS,
            WarrantyInfo NVARCHAR(1000) COLLATE Vietnamese_CI_AS,
            ItemNumber NVARCHAR(100),
            CreditCardPrice DECIMAL(18,2),
            CreatedDate DATETIME2,
            UpdatedDate DATETIME2,
            ScrapedAt DATETIME2,
            SourceUrl NVARCHAR(1000)
        )
        """
        
        cursor.execute(create_table_sql)
        conn.commit()
        print("‚úÖ ƒê√£ t·∫°o b·∫£ng Products_Temp v·ªõi Vietnamese_CI_AS collation")
        
        # B∆∞·ªõc 3: Ki·ªÉm tra collation c·ªßa b·∫£ng temp
        print("\n3Ô∏è‚É£ KI·ªÇM TRA COLLATION B·∫¢NG TEMP")
        print("-" * 30)
        
        cursor.execute("""
            SELECT 
                c.name as ColumnName,
                c.collation_name as TempCollation,
                t.name as DataType
            FROM sys.columns c
            INNER JOIN sys.types t ON c.user_type_id = t.user_type_id
            WHERE c.object_id = OBJECT_ID('Products_Temp')
            AND c.name IN ('Condition', 'Gender', 'Certificate', 'WarrantyInfo', 'Name', 'Description')
            ORDER BY c.name
        """)
        
        temp_columns = cursor.fetchall()
        print("Collation b·∫£ng temp:")
        for col in temp_columns:
            print(f"  {col[0]}: {col[2]} (Collation: {col[1]})")
        
        # B∆∞·ªõc 4: Sao ch√©p d·ªØ li·ªáu
        print("\n4Ô∏è‚É£ SAO CH√âP D·ªÆ LI·ªÜU")
        print("-" * 30)
        
        copy_sql = """
        INSERT INTO Products_Temp (
            Name, Slug, Description, Price, BrandId, CategoryId, Image, Quantity, Sold, 
            CapitalPrice, IsActive, Model, ModelNumber, Year, Gender, Condition, CaseMaterial, 
            CaseSize, Crystal, BezelMaterial, SerialNumber, DialColor, HourMarkers, Calibre, 
            MovementType, Complication, BraceletMaterial, BraceletType, ClaspType, BoxAndPapers, 
            Certificate, WarrantyInfo, ItemNumber, CreditCardPrice, CreatedDate, UpdatedDate, 
            ScrapedAt, SourceUrl
        )
        SELECT 
            Name, Slug, Description, Price, BrandId, CategoryId, Image, Quantity, Sold, 
            CapitalPrice, IsActive, Model, ModelNumber, Year, Gender, Condition, CaseMaterial, 
            CaseSize, Crystal, BezelMaterial, SerialNumber, DialColor, HourMarkers, Calibre, 
            MovementType, Complication, BraceletMaterial, BraceletType, ClaspType, BoxAndPapers, 
            Certificate, WarrantyInfo, ItemNumber, CreditCardPrice, CreatedDate, UpdatedDate, 
            ScrapedAt, SourceUrl
        FROM Products
        """
        
        cursor.execute(copy_sql)
        conn.commit()
        
        # Ki·ªÉm tra s·ªë l∆∞·ª£ng
        cursor.execute("SELECT COUNT(*) FROM Products")
        original_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM Products_Temp")
        temp_count = cursor.fetchone()[0]
        
        print(f"‚úÖ ƒê√£ sao ch√©p {temp_count}/{original_count} b·∫£n ghi")
        
        # B∆∞·ªõc 5: Test Unicode
        print("\n5Ô∏è‚É£ TEST UNICODE")
        print("-" * 30)
        
        test_data = [
            ("ƒê·ªìng h·ªì Rolex Submariner", "dong-ho-rolex-submariner", "M√¥ t·∫£ ƒë·ªìng h·ªì Rolex", 100000000, 1, 1, "image.jpg", 1, 0, 80000000, 1, "Submariner", "123456", 2023, "Nam", "Xu·∫•t s·∫Øc", "Th√©p kh√¥ng g·ªâ", "40MM", "Sapphire", "Ceramic", "123456", "ƒêen", "Index", "3235", "T·ª± ƒë·ªông", "Kh√¥ng", "Th√©p", "Oyster", "Folding", 1, "C√≥", "5 NƒÉm", "ROLEX001", 103000000, datetime.now(), datetime.now(), datetime.now(), "https://example.com")
        ]
        
        insert_sql = """
        INSERT INTO Products_Temp (
            Name, Slug, Description, Price, BrandId, CategoryId, Image, Quantity, Sold, 
            CapitalPrice, IsActive, Model, ModelNumber, Year, Gender, Condition, CaseMaterial, 
            CaseSize, Crystal, BezelMaterial, SerialNumber, DialColor, HourMarkers, Calibre, 
            MovementType, Complication, BraceletMaterial, BraceletType, ClaspType, BoxAndPapers, 
            Certificate, WarrantyInfo, ItemNumber, CreditCardPrice, CreatedDate, UpdatedDate, 
            ScrapedAt, SourceUrl
        )
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """
        
        cursor.execute(insert_sql, test_data[0])
        conn.commit()
        print("‚úÖ ƒê√£ th√™m d·ªØ li·ªáu test Unicode")
        
        # Ki·ªÉm tra d·ªØ li·ªáu test
        cursor.execute("SELECT Name, Gender, Condition, Certificate, WarrantyInfo FROM Products_Temp WHERE Name LIKE '%ƒê·ªìng h·ªì%'")
        test_results = cursor.fetchall()
        print("\nD·ªØ li·ªáu test Unicode:")
        for row in test_results:
            print(f"  {row[0]} | {row[1]} | {row[2]} | {row[3]} | {row[4]}")
        
        # B∆∞·ªõc 6: Thay th·∫ø b·∫£ng
        print("\n6Ô∏è‚É£ THAY TH·∫æ B·∫¢NG")
        print("-" * 30)
        
        # X√≥a b·∫£ng g·ªëc
        cursor.execute("DROP TABLE Products")
        print("üóëÔ∏è ƒê√£ x√≥a b·∫£ng Products g·ªëc")
        
        # ƒê·ªïi t√™n b·∫£ng temp
        cursor.execute("EXEC sp_rename 'Products_Temp', 'Products'")
        print("üîÑ ƒê√£ ƒë·ªïi t√™n Products_Temp th√†nh Products")
        
        # T·∫°o l·∫°i index
        indexes = [
            "CREATE INDEX IX_Products_Condition ON Products(Condition)",
            "CREATE INDEX IX_Products_Gender ON Products(Gender)",
            "CREATE INDEX IX_Products_Certificate ON Products(Certificate)",
            "CREATE INDEX IX_Products_BrandId ON Products(BrandId)",
            "CREATE INDEX IX_Products_CategoryId ON Products(CategoryId)",
            "CREATE INDEX IX_Products_Price ON Products(Price)"
        ]
        
        for index_sql in indexes:
            try:
                cursor.execute(index_sql)
                print(f"‚úÖ ƒê√£ t·∫°o index: {index_sql}")
            except Exception as e:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o index: {e}")
        
        conn.commit()
        
        # B∆∞·ªõc 7: Ki·ªÉm tra k·∫øt qu·∫£
        print("\n7Ô∏è‚É£ KI·ªÇM TRA K·∫æT QU·∫¢")
        print("-" * 30)
        
        # Ki·ªÉm tra collation m·ªõi
        cursor.execute("""
            SELECT 
                c.name as ColumnName,
                c.collation_name as NewCollation,
                t.name as DataType
            FROM sys.columns c
            INNER JOIN sys.types t ON c.user_type_id = t.user_type_id
            WHERE c.object_id = OBJECT_ID('Products')
            AND c.name IN ('Condition', 'Gender', 'Certificate', 'WarrantyInfo', 'Name', 'Description')
            ORDER BY c.name
        """)
        
        new_columns = cursor.fetchall()
        print("Collation m·ªõi:")
        for col in new_columns:
            print(f"  {col[0]}: {col[2]} (Collation: {col[1]})")
        
        # Ki·ªÉm tra d·ªØ li·ªáu Unicode
        cursor.execute("SELECT Name, Gender, Condition, Certificate, WarrantyInfo FROM Products WHERE Name LIKE '%ƒê·ªìng h·ªì%'")
        unicode_results = cursor.fetchall()
        print("\nD·ªØ li·ªáu Unicode:")
        for row in unicode_results:
            print(f"  {row[0]} | {row[1]} | {row[2]} | {row[3]} | {row[4]}")
        
        # Th·ªëng k√™
        cursor.execute("SELECT COUNT(*) FROM Products")
        total_count = cursor.fetchone()[0]
        print(f"\nüìä T·ªïng s·ªë s·∫£n ph·∫©m: {total_count}")
        
        cursor.close()
        conn.close()
        
        print("\nüéâ HO√ÄN TH√ÄNH!")
        print("‚úÖ Collation ƒë√£ ƒë∆∞·ª£c s·ª≠a th√†nh Vietnamese_CI_AS")
        print("‚úÖ Unicode support ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t")
        print("‚úÖ Backup ƒë∆∞·ª£c t·∫°o an to√†n")
        
    except Exception as e:
        print(f"‚ùå L·ªñI: {e}")

if __name__ == "__main__":
    main()
