import pyodbc
import pandas as pd

def connect_to_database():
    """
    K·∫øt n·ªëi ƒë·∫øn database SQL Server
    """
    try:
        # Connection string t·ª´ appsettings.json
        connection_string = (
            "Driver={ODBC Driver 17 for SQL Server};"
            "Server=localhost;"
            "Database=Shopping_Demo;"
            "Trusted_Connection=yes;"
        )
        
        connection = pyodbc.connect(connection_string)
        print("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn database Shopping_Demo!")
        return connection
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
        return None

def show_database_info(connection):
    """
    Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n v·ªÅ database
    """
    print("\n" + "="*60)
    print("üìä TH√îNG TIN DATABASE SHOPPING_DEMO")
    print("="*60)
    
    # L·∫•y danh s√°ch t·∫•t c·∫£ c√°c b·∫£ng
    query = """
    SELECT 
        TABLE_NAME,
        TABLE_SCHEMA
    FROM INFORMATION_SCHEMA.TABLES 
    WHERE TABLE_TYPE = 'BASE TABLE'
    ORDER BY TABLE_NAME
    """
    
    try:
        tables_df = pd.read_sql(query, connection)
        print(f"\nüìã T·ªïng s·ªë b·∫£ng: {len(tables_df)}")
        print("\nDanh s√°ch c√°c b·∫£ng:")
        for i, row in tables_df.iterrows():
            print(f"  {i+1}. {row['TABLE_NAME']} (Schema: {row['TABLE_SCHEMA']})")
        
        return tables_df
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y danh s√°ch b·∫£ng: {e}")
        return pd.DataFrame()

def show_table_structure(connection, table_name):
    """
    Hi·ªÉn th·ªã c·∫•u tr√∫c c·ªßa m·ªôt b·∫£ng c·ª• th·ªÉ
    """
    print(f"\nüîç C·∫§U TR√öC B·∫¢NG: {table_name}")
    print("-" * 50)
    
    query = """
    SELECT 
        COLUMN_NAME,
        DATA_TYPE,
        IS_NULLABLE,
        COLUMN_DEFAULT,
        CHARACTER_MAXIMUM_LENGTH
    FROM INFORMATION_SCHEMA.COLUMNS 
    WHERE TABLE_NAME = ?
    ORDER BY ORDINAL_POSITION
    """
    
    try:
        structure_df = pd.read_sql(query, connection, params=[table_name])
        
        if not structure_df.empty:
            print(f"{'T√™n c·ªôt':<20} {'Ki·ªÉu d·ªØ li·ªáu':<15} {'NULL':<8} {'M·∫∑c ƒë·ªãnh':<15} {'ƒê·ªô d√†i':<10}")
            print("-" * 70)
            
            for _, row in structure_df.iterrows():
                column_name = row['COLUMN_NAME']
                data_type = row['DATA_TYPE']
                is_nullable = row['IS_NULLABLE']
                default_value = str(row['COLUMN_DEFAULT']) if row['COLUMN_DEFAULT'] else 'NULL'
                max_length = str(row['CHARACTER_MAXIMUM_LENGTH']) if row['CHARACTER_MAXIMUM_LENGTH'] else '-'
                
                print(f"{column_name:<20} {data_type:<15} {is_nullable:<8} {default_value:<15} {max_length:<10}")
        else:
            print("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin c·∫•u tr√∫c b·∫£ng")
            
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y c·∫•u tr√∫c b·∫£ng: {e}")

def show_sample_data(connection, table_name, limit=3):
    """
    Hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u t·ª´ b·∫£ng
    """
    print(f"\nüìÑ D·ªÆ LI·ªÜU M·∫™U T·ª™ B·∫¢NG: {table_name} (Top {limit} d√≤ng)")
    print("-" * 50)
    
    query = f"SELECT TOP {limit} * FROM [{table_name}]"
    
    try:
        data_df = pd.read_sql(query, connection)
        
        if not data_df.empty:
            print(data_df.to_string(index=False))
        else:
            print("üì≠ B·∫£ng kh√¥ng c√≥ d·ªØ li·ªáu")
            
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu m·∫´u: {e}")

def show_table_relationships(connection):
    """
    Hi·ªÉn th·ªã c√°c m·ªëi quan h·ªá gi·ªØa c√°c b·∫£ng
    """
    print(f"\nüîó M·ªêI QUAN H·ªÜ GI·ªÆA C√ÅC B·∫¢NG")
    print("-" * 50)
    
    query = """
    SELECT 
        fk.TABLE_NAME as FK_TABLE,
        fk.COLUMN_NAME as FK_COLUMN,
        pk.TABLE_NAME as PK_TABLE,
        pk.COLUMN_NAME as PK_COLUMN
    FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE fk
    INNER JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS rc 
        ON fk.CONSTRAINT_NAME = rc.CONSTRAINT_NAME
    INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE pk 
        ON rc.UNIQUE_CONSTRAINT_NAME = pk.CONSTRAINT_NAME
    WHERE fk.CONSTRAINT_NAME LIKE 'FK_%'
    ORDER BY fk.TABLE_NAME, fk.COLUMN_NAME
    """
    
    try:
        relationships_df = pd.read_sql(query, connection)
        
        if not relationships_df.empty:
            print(f"{'B·∫£ng FK':<20} {'C·ªôt FK':<20} {'B·∫£ng PK':<20} {'C·ªôt PK':<20}")
            print("-" * 80)
            
            for _, row in relationships_df.iterrows():
                fk_table = row['FK_TABLE']
                fk_column = row['FK_COLUMN']
                pk_table = row['PK_TABLE']
                pk_column = row['PK_COLUMN']
                
                print(f"{fk_table:<20} {fk_column:<20} {pk_table:<20} {pk_column:<20}")
        else:
            print("üì≠ Kh√¥ng t√¨m th·∫•y m·ªëi quan h·ªá foreign key")
            
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y th√¥ng tin m·ªëi quan h·ªá: {e}")

def main():
    """
    H√†m ch√≠nh
    """
    print("üêç PYTHON DATABASE READER - SHOPPING_DEMO")
    print("=" * 60)
    
    # K·∫øt n·ªëi database
    connection = connect_to_database()
    if not connection:
        return
    
    try:
        # Hi·ªÉn th·ªã th√¥ng tin database
        tables_df = show_database_info(connection)
        
        if not tables_df.empty:
            # Hi·ªÉn th·ªã m·ªëi quan h·ªá
            show_table_relationships(connection)
            
            # Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn b·∫£ng ƒë·ªÉ xem chi ti·∫øt
            print(f"\nüîç B·∫°n c√≥ mu·ªën xem chi ti·∫øt b·∫£ng n√†o kh√¥ng?")
            print("Nh·∫≠p s·ªë th·ª© t·ª± b·∫£ng (ho·∫∑c 'all' ƒë·ªÉ xem t·∫•t c·∫£, 'q' ƒë·ªÉ tho√°t):")
            
            while True:
                choice = input("L·ª±a ch·ªçn c·ªßa b·∫°n: ").strip().lower()
                
                if choice == 'q':
                    break
                elif choice == 'all':
                    # Hi·ªÉn th·ªã t·∫•t c·∫£ c√°c b·∫£ng
                    for _, row in tables_df.iterrows():
                        table_name = row['TABLE_NAME']
                        show_table_structure(connection, table_name)
                        show_sample_data(connection, table_name)
                        print("\n" + "="*60)
                elif choice.isdigit():
                    index = int(choice) - 1
                    if 0 <= index < len(tables_df):
                        table_name = tables_df.iloc[index]['TABLE_NAME']
                        show_table_structure(connection, table_name)
                        show_sample_data(connection, table_name)
                    else:
                        print("‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá!")
                else:
                    print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p s·ªë ho·∫∑c 'all'/'q'")
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
    
    finally:
        # ƒê√≥ng k·∫øt n·ªëi
        connection.close()
        print("\nüîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi database")

if __name__ == "__main__":
    main()
