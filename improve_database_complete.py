#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Improve Database Format - Complete Version
Script c·∫£i thi·ªán ƒë·ªãnh d·∫°ng database v·ªõi x·ª≠ l√Ω t·∫•t c·∫£ foreign key constraints
"""

import pyodbc
from datetime import datetime

def main():
    print("üöÄ IMPROVE DATABASE FORMAT - COMPLETE VERSION")
    print("=" * 60)
    
    # Connection string
    connection_string = (
        "DRIVER={SQL Server};"
        "SERVER=localhost;"
        "DATABASE=Shopping_Demo;"
        "Trusted_Connection=yes;"
    )
    
    try:
        print("üîó ƒêang k·∫øt n·ªëi database...")
        conn = pyodbc.connect(connection_string)
        cursor = conn.cursor()
        print("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!")
        
        # B∆∞·ªõc 1: Ki·ªÉm tra hi·ªán tr·∫°ng
        print("\n1Ô∏è‚É£ KI·ªÇM TRA HI·ªÜN TR·∫†NG")
        print("-" * 40)
        
        # Ki·ªÉm tra collation database
        cursor.execute("SELECT name, collation_name FROM sys.databases WHERE name = 'Shopping_Demo'")
        db_info = cursor.fetchone()
        print(f"Database: {db_info[0]}")
        print(f"Collation hi·ªán t·∫°i: {db_info[1]}")
        
        # B∆∞·ªõc 2: Backup
        print("\n2Ô∏è‚É£ BACKUP D·ªÆ LI·ªÜU")
        print("-" * 40)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_table = f"Products_Backup_{timestamp}"
        
        backup_sql = f"SELECT * INTO {backup_table} FROM Products"
        cursor.execute(backup_sql)
        conn.commit()
        print(f"‚úÖ ƒê√£ backup th√†nh {backup_table}")
        
        # B∆∞·ªõc 3: T·∫°o b·∫£ng temp v·ªõi c·∫•u tr√∫c ƒë·∫ßy ƒë·ªß
        print("\n3Ô∏è‚É£ T·∫†O B·∫¢NG TEMP")
        print("-" * 40)
        
        # X√≥a b·∫£ng temp n·∫øu t·ªìn t·∫°i
        try:
            cursor.execute("DROP TABLE Products_Temp")
            conn.commit()
            print("üóëÔ∏è ƒê√£ x√≥a b·∫£ng temp c≈©")
        except:
            pass
        
        # T·∫°o b·∫£ng temp v·ªõi c·∫•u tr√∫c ƒë·∫ßy ƒë·ªß
        create_table_sql = """
        CREATE TABLE Products_Temp (
            Id INT IDENTITY(1,1) PRIMARY KEY,
            Name NVARCHAR(MAX) COLLATE Vietnamese_CI_AS,
            Slug NVARCHAR(MAX) COLLATE Vietnamese_CI_AS,
            Description NVARCHAR(MAX) COLLATE Vietnamese_CI_AS,
            Price DECIMAL(18,2),
            BrandId INT,
            CategoryId INT,
            Image NVARCHAR(MAX),
            Quantity INT,
            Sold INT,
            CapitalPrice DECIMAL(18,2),
            IsActive BIT,
            Model NVARCHAR(100) COLLATE Vietnamese_CI_AS,
            ModelNumber NVARCHAR(100),
            Year INT,
            Gender NVARCHAR(100) COLLATE Vietnamese_CI_AS,
            Condition NVARCHAR(400) COLLATE Vietnamese_CI_AS,
            CaseMaterial NVARCHAR(200) COLLATE Vietnamese_CI_AS,
            CaseSize NVARCHAR(40),
            Crystal NVARCHAR(100),
            BezelMaterial NVARCHAR(200) COLLATE Vietnamese_CI_AS,
            SerialNumber NVARCHAR(200),
            DialColor NVARCHAR(100) COLLATE Vietnamese_CI_AS,
            HourMarkers NVARCHAR(200) COLLATE Vietnamese_CI_AS,
            Calibre NVARCHAR(100) COLLATE Vietnamese_CI_AS,
            MovementType NVARCHAR(100) COLLATE Vietnamese_CI_AS,
            Complication NVARCHAR(200) COLLATE Vietnamese_CI_AS,
            BraceletMaterial NVARCHAR(200) COLLATE Vietnamese_CI_AS,
            BraceletType NVARCHAR(100) COLLATE Vietnamese_CI_AS,
            ClaspType NVARCHAR(100) COLLATE Vietnamese_CI_AS,
            BoxAndPapers BIT,
            Certificate NVARCHAR(200) COLLATE Vietnamese_CI_AS,
            WarrantyInfo NVARCHAR(1000) COLLATE Vietnamese_CI_AS,
            ItemNumber NVARCHAR(100),
            CreditCardPrice DECIMAL(18,2),
            CreatedDate DATETIME2,
            UpdatedDate DATETIME2,
            ScrapedAt DATETIME2,
            SourceUrl NVARCHAR(1000)
        )
        """
        
        cursor.execute(create_table_sql)
        conn.commit()
        print("‚úÖ ƒê√£ t·∫°o b·∫£ng Products_Temp v·ªõi Unicode support")
        
        # B∆∞·ªõc 4: Sao ch√©p d·ªØ li·ªáu
        print("\n4Ô∏è‚É£ SAO CH√âP D·ªÆ LI·ªÜU")
        print("-" * 40)
        
        copy_sql = """
        INSERT INTO Products_Temp (
            Name, Slug, Description, Price, BrandId, CategoryId, Image, Quantity, Sold, 
            CapitalPrice, IsActive, Model, ModelNumber, Year, Gender, Condition, CaseMaterial, 
            CaseSize, Crystal, BezelMaterial, SerialNumber, DialColor, HourMarkers, Calibre, 
            MovementType, Complication, BraceletMaterial, BraceletType, ClaspType, BoxAndPapers, 
            Certificate, WarrantyInfo, ItemNumber, CreditCardPrice, CreatedDate, UpdatedDate, 
            ScrapedAt, SourceUrl
        )
        SELECT 
            Name, Slug, Description, Price, BrandId, CategoryId, Image, Quantity, Sold, 
            CapitalPrice, IsActive, Model, ModelNumber, Year, Gender, Condition, CaseMaterial, 
            CaseSize, Crystal, BezelMaterial, SerialNumber, DialColor, HourMarkers, Calibre, 
            MovementType, Complication, BraceletMaterial, BraceletType, ClaspType, BoxAndPapers, 
            Certificate, WarrantyInfo, ItemNumber, CreditCardPrice, CreatedDate, UpdatedDate, 
            ScrapedAt, SourceUrl
        FROM Products
        """
        
        cursor.execute(copy_sql)
        conn.commit()
        
        # Ki·ªÉm tra s·ªë l∆∞·ª£ng
        cursor.execute("SELECT COUNT(*) FROM Products")
        original_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM Products_Temp")
        temp_count = cursor.fetchone()[0]
        
        print(f"‚úÖ ƒê√£ sao ch√©p {temp_count}/{original_count} b·∫£n ghi")
        
        # B∆∞·ªõc 5: Test Unicode
        print("\n5Ô∏è‚É£ TEST UNICODE SUPPORT")
        print("-" * 40)
        
        test_data = [
            ("ƒê·ªìng h·ªì Rolex Submariner", "dong-ho-rolex-submariner", "M√¥ t·∫£ ƒë·ªìng h·ªì Rolex", 100000000, 1, 1, "image.jpg", 1, 0, 80000000, 1, "Submariner", "123456", 2023, "Nam", "Xu·∫•t s·∫Øc", "Th√©p kh√¥ng g·ªâ", "40MM", "Sapphire", "Ceramic", "123456", "ƒêen", "Index", "3235", "T·ª± ƒë·ªông", "Kh√¥ng", "Th√©p", "Oyster", "Folding", 1, "C√≥", "5 NƒÉm", "ROLEX001", 103000000, datetime.now(), datetime.now(), datetime.now(), "https://example.com"),
            ("ƒê·ªìng h·ªì Omega Speedmaster", "dong-ho-omega-speedmaster", "M√¥ t·∫£ ƒë·ªìng h·ªì Omega", 80000000, 2, 1, "image2.jpg", 1, 0, 64000000, 1, "Speedmaster", "654321", 2022, "Nam", "R·∫•t t·ªët", "Th√©p kh√¥ng g·ªâ", "42MM", "Sapphire", "Tachymeter", "654321", "Tr·∫Øng", "Arabic", "1861", "T·ª± ƒë·ªông", "Chronograph", "Th√©p", "Bracelet", "Folding", 1, "Kh√¥ng", "3 NƒÉm", "OMEGA001", 82400000, datetime.now(), datetime.now(), datetime.now(), "https://example2.com"),
            ("ƒê·ªìng h·ªì Cartier Tank", "dong-ho-cartier-tank", "M√¥ t·∫£ ƒë·ªìng h·ªì Cartier", 60000000, 3, 2, "image3.jpg", 1, 0, 48000000, 1, "Tank", "789012", 2021, "N·ªØ", "T·ªët", "V√†ng 18k", "25MM", "Sapphire", "Kh√¥ng", "789012", "Tr·∫Øng", "Roman", "Manual", "Th·ªß c√¥ng", "Kh√¥ng", "Da", "Leather", "Tang", 1, "C√≥", "2 NƒÉm", "CARTIER001", 61800000, datetime.now(), datetime.now(), datetime.now(), "https://example3.com")
        ]
        
        insert_sql = """
        INSERT INTO Products_Temp (
            Name, Slug, Description, Price, BrandId, CategoryId, Image, Quantity, Sold, 
            CapitalPrice, IsActive, Model, ModelNumber, Year, Gender, Condition, CaseMaterial, 
            CaseSize, Crystal, BezelMaterial, SerialNumber, DialColor, HourMarkers, Calibre, 
            MovementType, Complication, BraceletMaterial, BraceletType, ClaspType, BoxAndPapers, 
            Certificate, WarrantyInfo, ItemNumber, CreditCardPrice, CreatedDate, UpdatedDate, 
            ScrapedAt, SourceUrl
        )
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """
        
        for data in test_data:
            cursor.execute(insert_sql, data)
        
        conn.commit()
        print("‚úÖ ƒê√£ th√™m d·ªØ li·ªáu test Unicode")
        
        # Ki·ªÉm tra d·ªØ li·ªáu test
        cursor.execute("SELECT Name, Gender, Condition, Certificate, WarrantyInfo FROM Products_Temp WHERE Name LIKE '%ƒê·ªìng h·ªì%'")
        test_results = cursor.fetchall()
        print("\nD·ªØ li·ªáu test Unicode:")
        for row in test_results:
            print(f"  {row[0]} | {row[1]} | {row[2]} | {row[3]} | {row[4]}")
        
        # B∆∞·ªõc 6: X·ª≠ l√Ω t·∫•t c·∫£ Foreign Key v√† thay th·∫ø b·∫£ng
        print("\n6Ô∏è‚É£ X·ª¨ L√ù T·∫§T C·∫¢ FOREIGN KEY V√Ä THAY TH·∫æ B·∫¢NG")
        print("-" * 40)
        
        # L·∫•y t·∫•t c·∫£ foreign key constraints tham chi·∫øu ƒë·∫øn Products
        cursor.execute("""
            SELECT 
                fk.name as FKName,
                OBJECT_NAME(fk.parent_object_id) as TableName,
                COL_NAME(fkc.parent_object_id, fkc.parent_column_id) as ColumnName,
                OBJECT_NAME(fk.referenced_object_id) as ReferencedTableName,
                COL_NAME(fkc.referenced_object_id, fkc.referenced_column_id) as ReferencedColumnName
            FROM sys.foreign_keys fk
            INNER JOIN sys.foreign_key_columns fkc ON fk.object_id = fkc.constraint_object_id
            WHERE OBJECT_NAME(fk.referenced_object_id) = 'Products'
            ORDER BY OBJECT_NAME(fk.parent_object_id), fk.name
        """)
        
        referencing_fks = cursor.fetchall()
        print(f"T√¨m th·∫•y {len(referencing_fks)} foreign key constraints tham chi·∫øu ƒë·∫øn Products")
        
        # X√≥a t·∫•t c·∫£ foreign key constraints tham chi·∫øu ƒë·∫øn Products
        for fk in referencing_fks:
            fk_name = fk[0]
            table_name = fk[1]
            drop_fk_sql = f"ALTER TABLE {table_name} DROP CONSTRAINT {fk_name}"
            cursor.execute(drop_fk_sql)
            print(f"üóëÔ∏è ƒê√£ x√≥a FK constraint: {fk_name} t·ª´ b·∫£ng {table_name}")
        
        # L·∫•y foreign key constraints t·ª´ Products
        cursor.execute("""
            SELECT 
                fk.name as FKName,
                OBJECT_NAME(fk.parent_object_id) as TableName,
                COL_NAME(fkc.parent_object_id, fkc.parent_column_id) as ColumnName,
                OBJECT_NAME(fk.referenced_object_id) as ReferencedTableName,
                COL_NAME(fkc.referenced_object_id, fkc.referenced_column_id) as ReferencedColumnName
            FROM sys.foreign_keys fk
            INNER JOIN sys.foreign_key_columns fkc ON fk.object_id = fkc.constraint_object_id
            WHERE OBJECT_NAME(fk.parent_object_id) = 'Products'
            ORDER BY fk.name
        """)
        
        products_fks = cursor.fetchall()
        print(f"T√¨m th·∫•y {len(products_fks)} foreign key constraints t·ª´ Products")
        
        # X√≥a foreign key constraints t·ª´ Products
        for fk in products_fks:
            fk_name = fk[0]
            drop_fk_sql = f"ALTER TABLE Products DROP CONSTRAINT {fk_name}"
            cursor.execute(drop_fk_sql)
            print(f"üóëÔ∏è ƒê√£ x√≥a FK constraint: {fk_name}")
        
        conn.commit()
        
        # X√≥a b·∫£ng g·ªëc
        cursor.execute("DROP TABLE Products")
        print("üóëÔ∏è ƒê√£ x√≥a b·∫£ng Products g·ªëc")
        
        # ƒê·ªïi t√™n b·∫£ng temp
        cursor.execute("EXEC sp_rename 'Products_Temp', 'Products'")
        print("üîÑ ƒê√£ ƒë·ªïi t√™n Products_Temp th√†nh Products")
        
        # T·∫°o l·∫°i foreign key constraints t·ª´ Products
        print("üîó ƒêang t·∫°o l·∫°i foreign key constraints t·ª´ Products...")
        for fk in products_fks:
            fk_name = fk[0]
            column_name = fk[2]
            referenced_table = fk[3]
            referenced_column = fk[4]
            
            # T·∫°o t√™n FK m·ªõi
            new_fk_name = f"FK_Products_{referenced_table}_{column_name}"
            
            create_fk_sql = f"""
            ALTER TABLE Products 
            ADD CONSTRAINT {new_fk_name} 
            FOREIGN KEY ({column_name}) 
            REFERENCES {referenced_table}({referenced_column})
            """
            
            try:
                cursor.execute(create_fk_sql)
                print(f"‚úÖ ƒê√£ t·∫°o l·∫°i FK: {new_fk_name}")
            except Exception as e:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o l·∫°i FK {new_fk_name}: {e}")
        
        # T·∫°o l·∫°i foreign key constraints tham chi·∫øu ƒë·∫øn Products
        print("üîó ƒêang t·∫°o l·∫°i foreign key constraints tham chi·∫øu ƒë·∫øn Products...")
        for fk in referencing_fks:
            fk_name = fk[0]
            table_name = fk[1]
            column_name = fk[2]
            referenced_table = fk[3]
            referenced_column = fk[4]
            
            # T·∫°o t√™n FK m·ªõi
            new_fk_name = f"FK_{table_name}_Products_{column_name}"
            
            create_fk_sql = f"""
            ALTER TABLE {table_name} 
            ADD CONSTRAINT {new_fk_name} 
            FOREIGN KEY ({column_name}) 
            REFERENCES {referenced_table}({referenced_column})
            """
            
            try:
                cursor.execute(create_fk_sql)
                print(f"‚úÖ ƒê√£ t·∫°o l·∫°i FK: {new_fk_name}")
            except Exception as e:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o l·∫°i FK {new_fk_name}: {e}")
        
        # T·∫°o l·∫°i index
        indexes = [
            "CREATE INDEX IX_Products_Condition ON Products(Condition)",
            "CREATE INDEX IX_Products_Gender ON Products(Gender)",
            "CREATE INDEX IX_Products_Certificate ON Products(Certificate)",
            "CREATE INDEX IX_Products_BrandId ON Products(BrandId)",
            "CREATE INDEX IX_Products_CategoryId ON Products(CategoryId)",
            "CREATE INDEX IX_Products_Price ON Products(Price)",
            "CREATE INDEX IX_Products_Model ON Products(Model)",
            "CREATE INDEX IX_Products_Year ON Products(Year)"
        ]
        
        for index_sql in indexes:
            cursor.execute(index_sql)
        
        conn.commit()
        print("‚úÖ ƒê√£ t·∫°o l·∫°i c√°c index")
        
        # B∆∞·ªõc 7: Ki·ªÉm tra k·∫øt qu·∫£
        print("\n7Ô∏è‚É£ KI·ªÇM TRA K·∫æT QU·∫¢")
        print("-" * 40)
        
        # Ki·ªÉm tra collation m·ªõi
        cursor.execute("""
            SELECT 
                c.name as ColumnName,
                c.collation_name as NewCollation,
                t.name as DataType
            FROM sys.columns c
            INNER JOIN sys.types t ON c.user_type_id = t.user_type_id
            WHERE c.object_id = OBJECT_ID('Products')
            AND c.name IN ('Condition', 'Gender', 'Certificate', 'WarrantyInfo', 'Name', 'Description')
            ORDER BY c.name
        """)
        
        new_columns = cursor.fetchall()
        print("Collation m·ªõi:")
        for col in new_columns:
            print(f"  {col[0]}: {col[2]} (Collation: {col[1]})")
        
        # Ki·ªÉm tra d·ªØ li·ªáu Unicode
        cursor.execute("SELECT Name, Gender, Condition, Certificate, WarrantyInfo FROM Products WHERE Name LIKE '%ƒê·ªìng h·ªì%'")
        unicode_results = cursor.fetchall()
        print("\nD·ªØ li·ªáu Unicode:")
        for row in unicode_results:
            print(f"  {row[0]} | {row[1]} | {row[2]} | {row[3]} | {row[4]}")
        
        # Th·ªëng k√™
        cursor.execute("SELECT COUNT(*) FROM Products")
        total_count = cursor.fetchone()[0]
        print(f"\nüìä T·ªïng s·ªë s·∫£n ph·∫©m: {total_count}")
        
        cursor.close()
        conn.close()
        
        print("\nüéâ HO√ÄN TH√ÄNH TH√ÄNH C√îNG!")
        print("‚úÖ Database ƒë√£ ƒë∆∞·ª£c c·∫£i thi·ªán v·ªõi Unicode support")
        print("‚úÖ Backup ƒë∆∞·ª£c t·∫°o an to√†n")
        print("‚úÖ T·∫•t c·∫£ foreign key constraints ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω")
        print("‚úÖ Ti·∫øng Vi·ªát s·∫Ω hi·ªÉn th·ªã ƒë√∫ng")
        print("‚úÖ T·∫•t c·∫£ c√°c c·ªôt ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi")
        
    except Exception as e:
        print(f"‚ùå L·ªñI: {e}")
        print("üí° H√£y ki·ªÉm tra l·∫°i k·∫øt n·ªëi v√† quy·ªÅn truy c·∫≠p")

if __name__ == "__main__":
    main()
