import re
import os
import json
import pyodbc
from datetime import datetime

def insert_vietnamese_descriptions():
    """Ch√®n c√°c m√¥ t·∫£ s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c Vi·ªát h√≥a v√†o database"""
    print("üóÑÔ∏è B·∫ÆT ƒê·∫¶U CH√àN M√î T·∫¢ VI·ªÜT H√ìA V√ÄO DATABASE")
    print("=" * 60)
    
    # Ki·ªÉm tra file
    input_file = "M√¥_t·∫£_s·∫£n_ph·∫©m_Ti·∫øng_Vi·ªát_Ho√†n_Ch·ªânh.txt"
    if not os.path.exists(input_file):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file {input_file}")
        return False
    
    try:
        # ƒê·ªçc file
        print(f"üìñ ƒêang ƒë·ªçc file {input_file}...")
        with open(input_file, 'r', encoding='utf-8') as file:
            lines = file.readlines()
        
        print(f"‚úÖ ƒê√£ ƒë·ªçc file! T·ªïng s·ªë d√≤ng: {len(lines)}")
        
        # L·ªçc ra c√°c m√¥ t·∫£ s·∫£n ph·∫©m (b·ªè qua header)
        descriptions = []
        for line in lines:
            line = line.strip()
            if line and line != "Chuy·ªÉn sang ti·∫øng vi·ªát" and line != "Description":
                descriptions.append(line)
        
        print(f"üìù T√¨m th·∫•y {len(descriptions)} m√¥ t·∫£ s·∫£n ph·∫©m")
        
        # ƒê·ªçc connection string t·ª´ appsettings.json
        print(f"\nüîó ƒê·ªåC C·∫§U H√åNH DATABASE...")
        print("=" * 50)
        
        appsettings_file = "appsettings.json"
        if not os.path.exists(appsettings_file):
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file {appsettings_file}")
            return False
        
        with open(appsettings_file, 'r', encoding='utf-8') as file:
            config = json.load(file)
        
        connection_string = config.get('ConnectionStrings', {}).get('ConnectedDb')
        if not connection_string:
            print("‚ùå Kh√¥ng t√¨m th·∫•y connection string trong appsettings.json")
            return False
        
        print(f"‚úÖ ƒê√£ ƒë·ªçc connection string")
        
        # K·∫øt n·ªëi SQL Server
        print(f"\nüîó K·∫æT N·ªêI SQL SERVER...")
        print("=" * 50)
        
        try:
            # S·ª≠ d·ª•ng connection string tr·ª±c ti·∫øp thay v√¨ DSN
            conn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};' + connection_string.replace('Server=', 'SERVER=').replace('Database=', 'DATABASE=').replace('Trusted_Connection=', 'Trusted_Connection=').replace('TrustServerCertificate=', 'TrustServerCertificate='))
            cursor = conn.cursor()
            print("‚úÖ K·∫øt n·ªëi SQL Server th√†nh c√¥ng!")
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi SQL Server: {e}")
            print("üîÑ Th·ª≠ k·∫øt n·ªëi v·ªõi driver kh√°c...")
            try:
                # Th·ª≠ v·ªõi SQL Server Native Client
                conn = pyodbc.connect('DRIVER={SQL Server Native Client 11.0};' + connection_string.replace('Server=', 'SERVER=').replace('Database=', 'DATABASE=').replace('Trusted_Connection=', 'Trusted_Connection=').replace('TrustServerCertificate=', 'TrustServerCertificate='))
                cursor = conn.cursor()
                print("‚úÖ K·∫øt n·ªëi SQL Server th√†nh c√¥ng v·ªõi Native Client!")
            except Exception as e2:
                print(f"‚ùå L·ªói k·∫øt n·ªëi v·ªõi Native Client: {e2}")
                print("üîÑ Th·ª≠ k·∫øt n·ªëi v·ªõi SQL Server driver...")
                try:
                    # Th·ª≠ v·ªõi SQL Server driver
                    conn = pyodbc.connect('DRIVER={SQL Server};' + connection_string.replace('Server=', 'SERVER=').replace('Database=', 'DATABASE=').replace('Trusted_Connection=', 'Trusted_Connection=').replace('TrustServerCertificate=', 'TrustServerCertificate='))
                    cursor = conn.cursor()
                    print("‚úÖ K·∫øt n·ªëi SQL Server th√†nh c√¥ng v·ªõi SQL Server driver!")
                except Exception as e3:
                    print(f"‚ùå L·ªói k·∫øt n·ªëi v·ªõi SQL Server driver: {e3}")
                    return False
        
        # Ki·ªÉm tra b·∫£ng Products
        print(f"\nüîç KI·ªÇM TRA B·∫¢NG PRODUCTS...")
        print("=" * 50)
        
        cursor.execute("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Products'")
        if not cursor.fetchone():
            print("‚ùå Kh√¥ng t√¨m th·∫•y b·∫£ng Products!")
            return False
        
        print("‚úÖ T√¨m th·∫•y b·∫£ng Products")
        
        # Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng
        cursor.execute("SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Products' ORDER BY ORDINAL_POSITION")
        columns = cursor.fetchall()
        print(f"üìã C·∫•u tr√∫c b·∫£ng Products:")
        for col in columns:
            print(f"   - {col[0]} ({col[1]})")
        
        # Ki·ªÉm tra s·ªë l∆∞·ª£ng s·∫£n ph·∫©m hi·ªán t·∫°i
        cursor.execute("SELECT COUNT(*) FROM Products")
        current_count = cursor.fetchone()[0]
        print(f"üìä S·ªë s·∫£n ph·∫©m hi·ªán t·∫°i: {current_count}")
        
        # Ki·ªÉm tra xem c√≥ c·ªôt Description kh√¥ng
        description_column = None
        for col in columns:
            if 'description' in col[0].lower():
                description_column = col[0]
                break
        
        if not description_column:
            print("‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt Description!")
            return False
        
        print(f"‚úÖ T√¨m th·∫•y c·ªôt: {description_column}")
        
        # L·∫•y danh s√°ch ID s·∫£n ph·∫©m
        cursor.execute(f"SELECT Id FROM Products ORDER BY Id")
        product_ids = [row[0] for row in cursor.fetchall()]
        
        print(f"üìã T√¨m th·∫•y {len(product_ids)} ID s·∫£n ph·∫©m")
        
        # Ki·ªÉm tra s·ªë l∆∞·ª£ng
        if len(descriptions) != len(product_ids):
            print(f"‚ö†Ô∏è C·∫¢NH B√ÅO: S·ªë l∆∞·ª£ng m√¥ t·∫£ ({len(descriptions)}) kh√°c v·ªõi s·ªë s·∫£n ph·∫©m ({len(product_ids)})")
            print("   S·∫Ω ch·ªâ c·∫≠p nh·∫≠t cho c√°c s·∫£n ph·∫©m c√≥ m√¥ t·∫£ t∆∞∆°ng ·ª©ng")
        
        # B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t
        print(f"\nüîÑ B·∫ÆT ƒê·∫¶U C·∫¨P NH·∫¨T M√î T·∫¢...")
        print("=" * 60)
        
        updated_count = 0
        min_count = min(len(descriptions), len(product_ids))
        
        for i in range(min_count):
            product_id = product_ids[i]
            description = descriptions[i]
            
            try:
                # C·∫≠p nh·∫≠t m√¥ t·∫£
                cursor.execute(f"UPDATE Products SET {description_column} = ? WHERE Id = ?", 
                             (description, product_id))
                
                print(f"  [{i+1}/{min_count}] ƒê√£ c·∫≠p nh·∫≠t s·∫£n ph·∫©m ID {product_id}")
                updated_count += 1
                
                # Hi·ªÉn th·ªã ti·∫øn ƒë·ªô
                if (i + 1) % 50 == 0:
                    print(f"üìä Ti·∫øn ƒë·ªô: {i+1}/{min_count} ({((i+1)/min_count*100):.1f}%)")
                
            except Exception as e:
                print(f"‚ùå L·ªói c·∫≠p nh·∫≠t s·∫£n ph·∫©m ID {product_id}: {e}")
        
        # Commit thay ƒë·ªïi
        print(f"\nüíæ L∆ØU THAY ƒê·ªîI V√ÄO DATABASE...")
        print("=" * 50)
        
        conn.commit()
        print("‚úÖ ƒê√£ l∆∞u thay ƒë·ªïi th√†nh c√¥ng!")
        
        # Th·ªëng k√™ k·∫øt qu·∫£
        print(f"\nüìä TH·ªêNG K√ä K·∫æT QU·∫¢:")
        print("=" * 60)
        print(f"‚úÖ T·ªïng s·ªë m√¥ t·∫£: {len(descriptions)}")
        print(f"‚úÖ T·ªïng s·ªë s·∫£n ph·∫©m: {len(product_ids)}")
        print(f"‚úÖ S·ªë s·∫£n ph·∫©m ƒë√£ c·∫≠p nh·∫≠t: {updated_count}")
        
        # Hi·ªÉn th·ªã m·∫´u k·∫øt qu·∫£
        print(f"\nüìã M·∫™U K·∫æT QU·∫¢:")
        print("=" * 60)
        
        for i in range(min(3, min_count)):
            product_id = product_ids[i]
            description = descriptions[i]
            
            print(f"\nüî∏ S·∫¢N PH·∫®M {i+1} (ID: {product_id}):")
            print(f"   M√¥ t·∫£: {description[:200]}...")
            print("   " + "-" * 40)
        
        # ƒê√≥ng k·∫øt n·ªëi
        conn.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return False

def main():
    print("üéØ SCRIPT CH√àN M√î T·∫¢ VI·ªÜT H√ìA V√ÄO DATABASE")
    print("=" * 60)
    
    # Th·ª±c hi·ªán ch√®n d·ªØ li·ªáu
    success = insert_vietnamese_descriptions()
    
    if success:
        print("\nüéâ HO√ÄN TH√ÄNH!")
        print("=" * 60)
        print("‚úÖ ƒê√£ ch√®n m√¥ t·∫£ Vi·ªát h√≥a v√†o database th√†nh c√¥ng")
        print("‚úÖ D·ªØ li·ªáu ƒë√£ s·∫µn s√†ng s·ª≠ d·ª•ng")
        
    else:
        print("\nüí• X·ª¨ L√ù TH·∫§T B·∫†I!")

if __name__ == "__main__":
    main()
