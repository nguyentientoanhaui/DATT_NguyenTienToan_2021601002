import pyodbc
import re

class CompleteEnglishRestorer:
    def __init__(self, connection_string):
        self.connection_string = connection_string
        self.conn = None
        
    def connect(self):
        try:
            self.conn = pyodbc.connect(self.connection_string)
            print("‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!")
            return True
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
            return False
    
    def close(self):
        if self.conn:
            self.conn.close()
            print("üîí ƒê√£ ƒë√≥ng k·∫øt n·ªëi database")
    
    def complete_english_restore(self):
        try:
            cursor = self.conn.cursor()
            
            print("\nüîÑ KH√îI PH·ª§C HO√ÄN TO√ÄN V·ªÄ TI·∫æNG ANH:")
            print("=" * 60)
            
            # SQL ƒë·ªÉ kh√¥i ph·ª•c ho√†n to√†n v·ªÅ ti·∫øng Anh
            restore_queries = [
                # Kh√¥i ph·ª•c Condition
                """
                UPDATE Products 
                SET Condition = CASE 
                    WHEN Condition = 'Xu·∫•t s·∫Øc' THEN 'Excellent'
                    WHEN Condition = 'R·∫•t t·ªët' THEN 'Very Good'
                    WHEN Condition = 'T·ªët' THEN 'Good'
                    WHEN Condition = 'Kh√°' THEN 'Fair'
                    WHEN Condition = 'K√©m' THEN 'Poor'
                    WHEN Condition = 'M·ªõi' THEN 'New'
                    WHEN Condition = 'C·ªï ƒëi·ªÉn' THEN 'Vintage'
                    WHEN Condition = 'ƒê√£ qua s·ª≠ d·ª•ng' THEN 'Pre-owned'
                    WHEN Condition = 'Ch∆∞a ƒëeo' THEN 'Unworn'
                    WHEN Condition = 'Ho√†n h·∫£o' THEN 'Mint'
                    ELSE Condition
                END
                """,
                
                # Kh√¥i ph·ª•c Gender
                """
                UPDATE Products 
                SET Gender = CASE 
                    WHEN Gender = 'Nam' THEN 'Men'
                    WHEN Gender = 'N·ªØ' THEN 'Women'
                    WHEN Gender = 'Male' THEN 'Men'
                    WHEN Gender = 'Female' THEN 'Women'
                    ELSE Gender
                END
                """,
                
                # Kh√¥i ph·ª•c Certificate
                """
                UPDATE Products 
                SET Certificate = CASE 
                    WHEN Certificate = 'H·ªôp g·ªëc' THEN 'Original Box'
                    WHEN Certificate = 'Gi·∫•y t·ªù g·ªëc' THEN 'Original Papers'
                    WHEN Certificate = 'Th·∫ª b·∫£o h√†nh' THEN 'Warranty Card'
                    WHEN Certificate = 'S·ªï b·∫£o h√†nh' THEN 'Service Book'
                    WHEN Certificate = 'Kh√¥ng c√≥ gi·∫•y t·ªù' THEN 'No Papers'
                    WHEN Certificate = 'H·ªôp v√† gi·∫•y t·ªù' THEN 'Box and Papers'
                    WHEN Certificate = 'Ch·ªâ c√≥ h·ªôp' THEN 'Box Only'
                    WHEN Certificate = 'Ch·ªâ c√≥ gi·∫•y t·ªù' THEN 'Papers Only'
                    WHEN Certificate = 'C√≥' THEN 'Yes'
                    WHEN Certificate = 'Kh√¥ng' THEN 'No'
                    ELSE Certificate
                END
                """,
                
                # Kh√¥i ph·ª•c WarrantyInfo
                """
                UPDATE Products 
                SET WarrantyInfo = CASE 
                    WHEN WarrantyInfo = '1 nƒÉm' THEN '1 Year'
                    WHEN WarrantyInfo = '2 nƒÉm' THEN '2 Years'
                    WHEN WarrantyInfo = '3 nƒÉm' THEN '3 Years'
                    WHEN WarrantyInfo = '5 nƒÉm' THEN '5 Years'
                    WHEN WarrantyInfo = 'Tr·ªçn ƒë·ªùi' THEN 'Lifetime'
                    WHEN WarrantyInfo = 'Kh√¥ng b·∫£o h√†nh' THEN 'No Warranty'
                    WHEN WarrantyInfo = 'B·∫£o h√†nh qu·ªëc t·∫ø' THEN 'International Warranty'
                    WHEN WarrantyInfo = 'B·∫£o h√†nh nh√† s·∫£n xu·∫•t' THEN 'Manufacturer Warranty'
                    ELSE WarrantyInfo
                END
                """,
                
                # Kh√¥i ph·ª•c Description - c√°c t·ª´ kh√≥a ch√≠nh
                """
                UPDATE Products 
                SET Description = REPLACE(Description, 'ƒê√£ s·ª≠ d·ª•ng', 'Pre-owned')
                """,
                
                """
                UPDATE Products 
                SET Description = REPLACE(Description, 'th√©p kh√¥ng g·ªâ', 'stainless steel')
                """,
                
                """
                UPDATE Products 
                SET Description = REPLACE(Description, 'b·ªô m√°y t·ª± ƒë·ªông', 'automatic movement')
                """,
                
                """
                UPDATE Products 
                SET Description = REPLACE(Description, 'c·ªï ƒëi·ªÉn', 'classic')
                """,
                
                """
                UPDATE Products 
                SET Description = REPLACE(Description, 'di s·∫£n', 'heritage')
                """,
                
                """
                UPDATE Products 
                SET Description = REPLACE(Description, 'm·ªõi nh·∫•t', 'latest')
                """,
                
                """
                UPDATE Products 
                SET Description = REPLACE(Description, 'tuy·ªát v·ªùi', 'excellent')
                """,
                
                """
                UPDATE Products 
                SET Description = REPLACE(Description, 'ch·∫•t l∆∞·ª£ng', 'quality')
                """,
                
                # Chuy·ªÉn ƒë·ªïi gi√° t·ª´ VND v·ªÅ USD
                """
                UPDATE Products 
                SET Price = CASE 
                    WHEN Price > 1000000 THEN Price / 24500
                    ELSE Price
                END
                """,
                
                """
                UPDATE Products 
                SET CapitalPrice = CASE 
                    WHEN CapitalPrice > 1000000 THEN CapitalPrice / 24500
                    ELSE CapitalPrice
                END
                """,
                
                """
                UPDATE Products 
                SET CreditCardPrice = CASE 
                    WHEN CreditCardPrice > 1000000 THEN CreditCardPrice / 24500
                    ELSE CreditCardPrice
                END
                """
            ]
            
            updated_count = 0
            for i, query in enumerate(restore_queries):
                try:
                    cursor.execute(query)
                    rows_affected = cursor.rowcount
                    updated_count += rows_affected
                    print(f"  ‚úÖ Query {i+1}: {rows_affected} rows affected")
                except Exception as e:
                    print(f"  ‚ö†Ô∏è Query {i+1} error: {e}")
                    continue
            
            self.conn.commit()
            print(f"\n‚úÖ ƒê√£ kh√¥i ph·ª•c t·ªïng c·ªông {updated_count} thay ƒë·ªïi!")
            
            cursor.close()
            return updated_count
            
        except Exception as e:
            print(f"‚ùå L·ªói kh√¥i ph·ª•c: {e}")
            self.conn.rollback()
            return 0
    
    def verify_results(self):
        try:
            cursor = self.conn.cursor()
            
            print("\n‚úÖ X√ÅC MINH K·∫æT QU·∫¢ KH√îI PH·ª§C:")
            print("=" * 50)
            
            cursor.execute("""
                SELECT TOP 3 Id, Name, Model, Condition, Gender, 
                       SUBSTRING(Description, 1, 150) as Description_Short,
                       Price, CapitalPrice, CreditCardPrice
                FROM Products
                ORDER BY Id
            """)
            
            products = cursor.fetchall()
            print("üì¶ SAMPLE PRODUCTS SAU KHI KH√îI PH·ª§C:")
            for product in products:
                print(f"  ID: {product[0]}")
                print(f"  Name: {product[1]}")
                print(f"  Model: {product[2]}")
                print(f"  Condition: {product[3]}")
                print(f"  Gender: {product[4]}")
                print(f"  Description: {product[5]}...")
                print(f"  Price: ${product[6]:,.0f}" if product[6] else "  Price: NULL")
                print(f"  CapitalPrice: ${product[7]:,.0f}" if product[7] else "  CapitalPrice: NULL")
                print(f"  CreditCardPrice: ${product[8]:,.0f}" if product[8] else "  CreditCardPrice: NULL")
                print("  " + "-" * 40)
            
            cursor.close()
            
        except Exception as e:
            print(f"‚ùå L·ªói x√°c minh: {e}")
    
    def run_restoration(self):
        print("üöÄ B·∫ÆT ƒê·∫¶U KH√îI PH·ª§C HO√ÄN TO√ÄN V·ªÄ TI·∫æNG ANH")
        print("=" * 60)
        
        if not self.connect():
            return False
        
        try:
            # Kh√¥i ph·ª•c d·ªØ li·ªáu
            updated_count = self.complete_english_restore()
            
            # X√°c minh k·∫øt qu·∫£
            self.verify_results()
            
            print(f"\nüéâ KH√îI PH·ª§C HO√ÄN TH√ÄNH!")
            print("=" * 60)
            print(f"‚úÖ ƒê√£ th·ª±c hi·ªán {updated_count} thay ƒë·ªïi")
            print("‚úÖ ƒê√£ kh√¥i ph·ª•c to√†n b·ªô n·ªôi dung v·ªÅ ti·∫øng Anh")
            print("‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi gi√° v·ªÅ USD")
            print("‚úÖ D·ªØ li·ªáu ƒë√£ tr·ªü v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu")
            
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return False
        finally:
            self.close()

def main():
    connection_string = "DRIVER={SQL Server};SERVER=localhost;DATABASE=Shopping_Demo;Trusted_Connection=yes;"
    
    restorer = CompleteEnglishRestorer(connection_string)
    success = restorer.run_restoration()
    
    if success:
        print("\nüéØ K·∫æT QU·∫¢: Kh√¥i ph·ª•c th√†nh c√¥ng!")
    else:
        print("\nüí• K·∫æT QU·∫¢: Kh√¥i ph·ª•c th·∫•t b·∫°i!")

if __name__ == "__main__":
    main()
