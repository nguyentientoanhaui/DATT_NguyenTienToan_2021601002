import pyodbc
import json
from datetime import datetime

def connect_database():
    """K·∫øt n·ªëi ƒë·∫øn database Shopping_Demo"""
    conn_str = (
        "DRIVER={ODBC Driver 17 for SQL Server};"
        "SERVER=(localdb)\\MSSQLLocalDB;"
        "DATABASE=Shopping_Demo;"
        "Trusted_Connection=yes;"
    )
    
    try:
        connection = pyodbc.connect(conn_str)
        print("Ket noi database thanh cong!")
        return connection
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi database: {e}")
        return None

def get_table_list(connection):
    """L·∫•y danh s√°ch t·∫•t c·∫£ c√°c b·∫£ng"""
    query = """
    SELECT TABLE_NAME 
    FROM INFORMATION_SCHEMA.TABLES 
    WHERE TABLE_TYPE = 'BASE TABLE'
    ORDER BY TABLE_NAME
    """
    
    cursor = connection.cursor()
    cursor.execute(query)
    tables = [row[0] for row in cursor.fetchall()]
    
    print("\nüìä DANH S√ÅCH C√ÅC B·∫¢NG TRONG DATABASE:")
    print("=" * 50)
    for i, table in enumerate(tables, 1):
        print(f"{i:2d}. üìã {table}")
    
    return tables

def get_table_structure(connection, table_name):
    """L·∫•y c·∫•u tr√∫c c·ªßa m·ªôt b·∫£ng"""
    query = """
    SELECT 
        COLUMN_NAME,
        DATA_TYPE,
        IS_NULLABLE,
        CHARACTER_MAXIMUM_LENGTH
    FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_NAME = ?
    ORDER BY ORDINAL_POSITION
    """
    
    cursor = connection.cursor()
    cursor.execute(query, table_name)
    
    print(f"\nüèóÔ∏è  C·∫§U TR√öC B·∫¢NG '{table_name}':")
    print("-" * 60)
    
    columns = []
    for row in cursor.fetchall():
        column_name, data_type, is_nullable, max_length = row
        nullable = "NULL" if is_nullable == 'YES' else "NOT NULL"
        length = f"({max_length})" if max_length else ""
        
        column_info = {
            'name': column_name,
            'type': data_type,
            'nullable': is_nullable == 'YES',
            'max_length': max_length
        }
        columns.append(column_info)
        
        print(f"  üîπ {column_name}: {data_type}{length} {nullable}")
    
    return columns

def count_records(connection, table_name):
    """ƒê·∫øm s·ªë b·∫£n ghi trong b·∫£ng"""
    try:
        cursor = connection.cursor()
        cursor.execute(f"SELECT COUNT(*) FROM [{table_name}]")
        count = cursor.fetchone()[0]
        return count
    except Exception as e:
        print(f"‚ùå L·ªói ƒë·∫øm b·∫£ng {table_name}: {e}")
        return 0

def get_sample_data(connection, table_name, limit=5):
    """L·∫•y d·ªØ li·ªáu m·∫´u t·ª´ b·∫£ng"""
    try:
        cursor = connection.cursor()
        cursor.execute(f"SELECT TOP {limit} * FROM [{table_name}]")
        
        # L·∫•y t√™n c·ªôt
        columns = [column[0] for column in cursor.description]
        
        # L·∫•y d·ªØ li·ªáu
        rows = cursor.fetchall()
        
        print(f"\nüìÑ D·ªÆ LI·ªÜU M·∫™U B·∫¢NG '{table_name}' (Top {limit}):")
        print("-" * 80)
        
        if rows:
            # In header
            header = " | ".join(f"{col[:15]:15}" for col in columns)
            print(header)
            print("-" * len(header))
            
            # In d·ªØ li·ªáu
            for row in rows:
                row_str = " | ".join(f"{str(val)[:15]:15}" if val is not None else "NULL".ljust(15) for val in row)
                print(row_str)
        else:
            print("   (Kh√¥ng c√≥ d·ªØ li·ªáu)")
        
        return rows, columns
    except Exception as e:
        print(f"‚ùå L·ªói l·∫•y d·ªØ li·ªáu b·∫£ng {table_name}: {e}")
        return [], []

def analyze_products(connection):
    """Ph√¢n t√≠ch chi ti·∫øt b·∫£ng Products"""
    print("\nüîç PH√ÇN T√çCH CHI TI·∫æT B·∫¢NG PRODUCTS:")
    print("=" * 50)
    
    queries = [
        ("T·ªïng s·ªë s·∫£n ph·∫©m", "SELECT COUNT(*) FROM Products"),
        ("S·∫£n ph·∫©m ƒëang ho·∫°t ƒë·ªông", "SELECT COUNT(*) FROM Products WHERE IsActive = 1"),
        ("S·∫£n ph·∫©m c√≥ ·∫£nh ch√≠nh", "SELECT COUNT(*) FROM Products WHERE Image IS NOT NULL AND Image != ''"),
        ("S·∫£n ph·∫©m c√≥ ProductImages", """
            SELECT COUNT(DISTINCT p.Id) 
            FROM Products p 
            INNER JOIN ProductImages pi ON p.Id = pi.ProductId
        """)
    ]
    
    cursor = connection.cursor()
    for description, query in queries:
        try:
            cursor.execute(query)
            result = cursor.fetchone()[0]
            print(f"üìä {description}: {result:,}")
        except Exception as e:
            print(f"‚ùå L·ªói {description}: {e}")

def analyze_product_images(connection):
    """Ph√¢n t√≠ch b·∫£ng ProductImages"""
    print("\nüñºÔ∏è  PH√ÇN T√çCH B·∫¢NG PRODUCTIMAGES:")
    print("=" * 40)
    
    queries = [
        ("T·ªïng s·ªë ·∫£nh", "SELECT COUNT(*) FROM ProductImages"),
        ("·∫¢nh c√≥ URL", "SELECT COUNT(*) FROM ProductImages WHERE ImageUrl IS NOT NULL AND ImageUrl != ''"),
        ("·∫¢nh c√≥ ImageName", "SELECT COUNT(*) FROM ProductImages WHERE ImageName IS NOT NULL AND ImageName != ''"),
        ("·∫¢nh m·∫∑c ƒë·ªãnh", "SELECT COUNT(*) FROM ProductImages WHERE IsDefault = 1")
    ]
    
    cursor = connection.cursor()
    for description, query in queries:
        try:
            cursor.execute(query)
            result = cursor.fetchone()[0]
            print(f"üìä {description}: {result:,}")
        except Exception as e:
            print(f"‚ùå L·ªói {description}: {e}")

def check_specific_product(connection, product_id):
    """Ki·ªÉm tra s·∫£n ph·∫©m c·ª• th·ªÉ"""
    print(f"\nüîç KI·ªÇM TRA S·∫¢N PH·∫®M ID {product_id}:")
    print("-" * 40)
    
    # Th√¥ng tin s·∫£n ph·∫©m
    cursor = connection.cursor()
    cursor.execute("SELECT Id, Name, Image, IsActive FROM Products WHERE Id = ?", product_id)
    product = cursor.fetchone()
    
    if product:
        print(f"üì¶ S·∫£n ph·∫©m: {product[1]}")
        print(f"üñºÔ∏è  ·∫¢nh ch√≠nh: {product[2] if product[2] else 'Kh√¥ng c√≥'}")
        print(f"‚úÖ Tr·∫°ng th√°i: {'Ho·∫°t ƒë·ªông' if product[3] else 'Ng·ª´ng ho·∫°t ƒë·ªông'}")
        
        # Ki·ªÉm tra ProductImages
        cursor.execute("""
            SELECT Id, ImageName, ImageUrl, IsDefault 
            FROM ProductImages 
            WHERE ProductId = ?
            ORDER BY IsDefault DESC, Id
        """, product_id)
        
        images = cursor.fetchall()
        print(f"üñºÔ∏è  S·ªë ·∫£nh ph·ª•: {len(images)}")
        
        if images:
            print("   Chi ti·∫øt ·∫£nh ph·ª•:")
            for img in images:
                default_text = " (M·∫∑c ƒë·ªãnh)" if img[3] else ""
                url_text = img[2] if img[2] else "Kh√¥ng c√≥ URL"
                name_text = img[1] if img[1] else "Kh√¥ng c√≥ t√™n"
                print(f"     - ID {img[0]}: {name_text} | URL: {url_text[:50]}...{default_text}")
    else:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ID {product_id}")

def main():
    """H√†m ch√≠nh"""
    print("PHAN TICH DATABASE SHOPPING_DEMO")
    print("=" * 60)
    
    # K·∫øt n·ªëi database
    connection = connect_database()
    if not connection:
        return
    
    try:
        # 1. L·∫•y danh s√°ch b·∫£ng
        tables = get_table_list(connection)
        
        # 2. ƒê·∫øm s·ªë b·∫£n ghi trong m·ªói b·∫£ng
        print("\nüìä S·ªê L∆Ø·ª¢NG B·∫¢N GHI:")
        print("=" * 30)
        total_records = 0
        for table in tables:
            count = count_records(connection, table)
            total_records += count
            print(f"üìà {table}: {count:,} b·∫£n ghi")
        
        print(f"\nüìä T·ªïng c·ªông: {total_records:,} b·∫£n ghi")
        
        # 3. Ph√¢n t√≠ch c√°c b·∫£ng quan tr·ªçng
        analyze_products(connection)
        analyze_product_images(connection)
        
        # 4. Xem c·∫•u tr√∫c b·∫£ng quan tr·ªçng
        important_tables = ['Products', 'ProductImages', 'Categories', 'Brands']
        for table in important_tables:
            if table in tables:
                get_table_structure(connection, table)
        
        # 5. Xem d·ªØ li·ªáu m·∫´u
        print("\n" + "="*60)
        print("üìÑ D·ªÆ LI·ªÜU M·∫™U:")
        for table in ['Products', 'ProductImages']:
            if table in tables:
                get_sample_data(connection, table, 3)
        
        # 6. Ki·ªÉm tra s·∫£n ph·∫©m c·ª• th·ªÉ
        check_specific_product(connection, 174)
        check_specific_product(connection, 182)
        
    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch: {e}")
    
    finally:
        connection.close()
        print("\nüîí ƒê√£ ƒë√≥ng k·∫øt n·ªëi database")
    
    print("\n‚úÖ HO√ÄN TH√ÄNH PH√ÇN T√çCH!")

if __name__ == "__main__":
    main()
