import re
import os
import time
from deep_translator import GoogleTranslator
import json

def create_sample_sql():
    """T·∫°o file SQL m·∫´u ƒë·ªÉ test"""
    sample_sql = """USE [Shopping_Demo]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[Products](
    [Id] [int] IDENTITY(1,1) NOT NULL,
    [Name] [nvarchar](max) NULL,
    [Slug] [nvarchar](max) NULL,
    [Description] [nvarchar](max) NULL,
    [Price] [decimal](18, 2) NULL,
    [BrandId] [int] NULL,
    [CategoryId] [int] NULL,
    [Image] [nvarchar](max) NULL,
    [Quantity] [int] NULL,
    [Sold] [int] NULL,
    [CapitalPrice] [decimal](18, 2) NULL,
    [IsActive] [bit] NULL,
    [Model] [nvarchar](max) NULL,
    [ModelNumber] [nvarchar](max) NULL,
    [Year] [int] NULL,
    [Gender] [nvarchar](max) NULL,
    [Condition] [nvarchar](max) NULL,
    [CaseMaterial] [nvarchar](max) NULL,
    [CaseSize] [nvarchar](max) NULL,
    [Crystal] [nvarchar](max) NULL,
    [BezelMaterial] [nvarchar](max) NULL,
    [SerialNumber] [nvarchar](max) NULL,
    [DialColor] [nvarchar](max) NULL,
    [HourMarkers] [nvarchar](max) NULL,
    [Calibre] [nvarchar](max) NULL,
    [MovementType] [nvarchar](max) NULL,
    [Complication] [nvarchar](max) NULL,
    [BraceletMaterial] [nvarchar](max) NULL,
    [BraceletType] [nvarchar](max) NULL,
    [ClaspType] [nvarchar](max) NULL,
    [BoxAndPapers] [bit] NULL,
    [Certificate] [nvarchar](max) NULL,
    [WarrantyInfo] [nvarchar](max) NULL,
    [ItemNumber] [nvarchar](max) NULL,
    [CreditCardPrice] [decimal](18, 2) NULL,
    [CreatedDate] [datetime2](7) NULL,
    [UpdatedDate] [datetime2](7) NULL,
    [ScrapedAt] [datetime2](7) NULL,
    [SourceUrl] [nvarchar](max) NULL
)

GO

SET IDENTITY_INSERT [dbo].[Products] ON

INSERT [dbo].[Products] ([Id], [Name], [Slug], [Description], [Price], [BrandId], [CategoryId], [Image], [Quantity], [Sold], [CapitalPrice], [IsActive], [Model], [ModelNumber], [Year], [Gender], [Condition], [CaseMaterial], [CaseSize], [Crystal], [BezelMaterial], [SerialNumber], [DialColor], [HourMarkers], [Calibre], [MovementType], [Complication], [BraceletMaterial], [BraceletType], [ClaspType], [BoxAndPapers], [Certificate], [WarrantyInfo], [ItemNumber], [CreditCardPrice], [CreatedDate], [UpdatedDate], [ScrapedAt], [SourceUrl]) VALUES (1, N'Breitling Superocean Heritage 57 Outerknown', N'breitling-superocean-heritage-57-outerknown', N'Used Breitling SuperOcean Heritage 57 Outerknown ref Ref A103703A1Q1W1 (2020) is a love letter of sorts to the original 1957 model. It takes much inspiration from the laid back lifestyle associated with 1960s surfing culture and is even endorsed by famous surfer Kelly Slater brand, Outerknown.', CAST(73377500.00 AS Decimal(18, 2)), 17, 238, N'https://images.bobswatches.com/breitling/images/Used-Breitling-Superocean-A103703A1Q1W1-Brown-Luminous-Dial-SKU172061.jpg', 1, 0, CAST(58702000.00 AS Decimal(18, 2)), 1, N'Superocean', N'A103703A1Q1W1', 2020, N'Male', N'Excellent', N'Stainless Steel', N'42MM', N'Sapphire', N'Ceramic Timing', N'6484XXX', N'Brown w/ Index hour markers, Luminous hands & Lumi', N'Index hour markers', N'Breitling Caliber B10', N'Automatic', N'', N'Fabric/Canvas', N'', N'Tang buckle', 1, N'Certified by CSA Watches - Leading independent watch authentication provider', N'Used Breitling watch comes with 1 year warranty from Bob Watches', N'172061', CAST(75505570.00 AS Decimal(18, 2)), CAST(N'2025-08-13T01:02:32.1097940' AS DateTime2), CAST(N'2025-08-21T20:52:51.2700000' AS DateTime2), CAST(N'2025-08-13T01:02:32.1097940' AS DateTime2), N'https://www.bobswatches.com/breitling/breitling-superocean-heritage-57-outerknown.html')

INSERT [dbo].[Products] ([Id], [Name], [Slug], [Description], [Price], [BrandId], [CategoryId], [Image], [Quantity], [Sold], [CapitalPrice], [IsActive], [Model], [ModelNumber], [Year], [Gender], [Condition], [CaseMaterial], [CaseSize], [Crystal], [BezelMaterial], [SerialNumber], [DialColor], [HourMarkers], [Calibre], [MovementType], [Complication], [BraceletMaterial], [BraceletType], [ClaspType], [BoxAndPapers], [Certificate], [WarrantyInfo], [ItemNumber], [CreditCardPrice], [CreatedDate], [UpdatedDate], [ScrapedAt], [SourceUrl]) VALUES (2, N'Breitling Classic AVI Chronograph 42 Curtiss Warhawk Green Dial', N'breitling-classic-avi-chronograph-42-curtiss-warhawk-green-dial', N'Used Breitling Classic AVI Chronograph 42 Curtiss Warhawk ref A233802A1L1A1 (2023 - 2024) hails from the AVI collection, also known as the Co-Pilot, a series developed by Breitling in the 1950s and inspired by early aviation.', CAST(122377500.00 AS Decimal(18, 2)), 17, 286, N'https://images.bobswatches.com/breitling/images/Breitling-Classic-AVI-A233802A1L1A1-SKU169504.jpg', 1, 0, CAST(97902000.00 AS Decimal(18, 2)), 1, N'Classic AVI', N'A233802A1L1A1', NULL, N'Male', N'Excellent', N'Stainless Steel', N'42MM', N'Sapphire', N'Stainless Steel 12-hour', N'7357XXX', N'Green w/ Arabic hour markers, Luminous hands & Lum', N'Arabic hour markers', N'23', N'Automatic', N'Chronograph', N'Stainless Steel', N'', N'Butterfly', 0, N'Certified by CSA Watches - Leading independent watch authentication provider', N'Used Breitling watch comes with 1 year warranty from Bob Watches', N'169504', CAST(125926570.00 AS Decimal(18, 2)), CAST(N'2025-08-13T01:02:32.1108020' AS DateTime2), CAST(N'2025-08-21T20:52:51.2700000' AS DateTime2), CAST(N'2025-08-13T01:02:32.1108020' AS DateTime2), N'https://www.bobswatches.com/breitling/breitling-classic-avi-chronograph-42-curtiss-warhawk-green-dial.html')

SET IDENTITY_INSERT [dbo].[Products] OFF
"""
    
    with open('Products_Sample.sql', 'w', encoding='utf-8') as file:
        file.write(sample_sql)
    
    print("‚úÖ ƒê√£ t·∫°o file Products_Sample.sql th√†nh c√¥ng!")

def translate_text_with_api(text, translator, cache, max_retries=3):
    """D·ªãch text s·ª≠ d·ª•ng Google Translate API"""
    if not text or len(text.strip()) < 3:
        return text
    
    # Ki·ªÉm tra cache
    if text in cache:
        return cache[text]
    
    for attempt in range(max_retries):
        try:
            # S·ª≠ d·ª•ng deep-translator library
            translated_text = translator.translate(text)
            
            # L∆∞u v√†o cache
            cache[text] = translated_text
            
            # Delay ƒë·ªÉ tr√°nh rate limiting
            time.sleep(0.5)
            
            return translated_text
            
        except Exception as e:
            print(f"‚ö†Ô∏è L·∫ßn th·ª≠ {attempt + 1} th·∫•t b·∫°i: {e}")
            if attempt < max_retries - 1:
                time.sleep(2 ** attempt)  # Exponential backoff
            else:
                print(f"‚ùå Kh√¥ng th·ªÉ d·ªãch: {text}")
                return text

def is_english_text(text):
    """Ki·ªÉm tra xem text c√≥ ph·∫£i l√† ti·∫øng Anh kh√¥ng"""
    if not text:
        return False
    
    # ƒê·∫øm s·ªë k√Ω t·ª± ti·∫øng Anh
    english_chars = sum(1 for c in text if c.isalpha() and ord(c) < 128)
    total_chars = sum(1 for c in text if c.isalpha())
    
    if total_chars == 0:
        return False
    
    # N·∫øu √≠t nh·∫•t 70% l√† k√Ω t·ª± ti·∫øng Anh th√¨ coi nh∆∞ l√† ti·∫øng Anh
    return english_chars / total_chars >= 0.7

def parse_values(values_string):
    """Parse c√°c gi√° tr·ªã trong VALUES clause"""
    try:
        values = []
        current_value = ""
        in_quotes = False
        quote_char = None
        paren_count = 0
        
        for char in values_string:
            if char in ["'", '"'] and (not in_quotes or char == quote_char):
                if not in_quotes:
                    in_quotes = True
                    quote_char = char
                else:
                    in_quotes = False
                    quote_char = None
            elif char == '(' and not in_quotes:
                paren_count += 1
                current_value += char
            elif char == ')' and not in_quotes:
                paren_count -= 1
                current_value += char
            elif char == ',' and not in_quotes and paren_count == 0:
                values.append(current_value.strip())
                current_value = ""
            else:
                current_value += char
        
        if current_value.strip():
            values.append(current_value.strip())
        
        return values
        
    except Exception as e:
        print(f"‚ùå L·ªói parse values: {e}")
        return []

def translate_sql_file():
    """D·ªãch file SQL m·∫´u - ch·ªâ d·ªãch 5 c·ªôt c·ª• th·ªÉ"""
    print("üöÄ B·∫ÆT ƒê·∫¶U D·ªäCH FILE SQL M·∫™U (CH·ªåN L·ªåC)")
    print("=" * 60)
    print("üéØ Ch·ªâ d·ªãch 5 c·ªôt: Description, Gender, Condition, CaseMaterial, WarrantyInfo")
    print("=" * 60)
    
    # T·∫°o file m·∫´u n·∫øu ch∆∞a c√≥
    if not os.path.exists('Products_Sample.sql'):
        create_sample_sql()
    
    # Kh·ªüi t·∫°o translator
    translator = GoogleTranslator(source='auto', target='vi')
    translation_cache = {}
    
    try:
        # ƒê·ªçc file SQL
        with open('Products_Sample.sql', 'r', encoding='utf-8') as file:
            content = file.read()
        
        print(f"‚úÖ ƒê√£ ƒë·ªçc file! K√≠ch th∆∞·ªõc: {len(content)} k√Ω t·ª±")
        
        # T√¨m INSERT statements b·∫±ng c√°ch t√°ch d√≤ng
        lines = content.split('\n')
        insert_statements = []
        current_statement = ""
        in_insert = False
        
        for line in lines:
            if 'INSERT' in line.upper() and 'PRODUCTS' in line.upper() and 'VALUES' in line.upper():
                if in_insert:  # N·∫øu ƒëang trong INSERT statement tr∆∞·ªõc ƒë√≥
                    insert_statements.append(current_statement)
                in_insert = True
                current_statement = line
            elif in_insert:
                current_statement += '\n' + line
                if line.strip().endswith(')'):
                    insert_statements.append(current_statement)
                    current_statement = ""
                    in_insert = False
        
        # Th√™m statement cu·ªëi c√πng n·∫øu ch∆∞a k·∫øt th√∫c
        if in_insert and current_statement:
            insert_statements.append(current_statement)
        
        print(f"‚úÖ T√¨m th·∫•y {len(insert_statements)} INSERT statements")
        
        # T√°ch ph·∫ßn ƒë·∫ßu v√† ph·∫ßn INSERT
        insert_start = content.find("INSERT")
        if insert_start == -1:
            print("‚ùå Kh√¥ng t√¨m th·∫•y INSERT statements")
            return False
        
        header_content = content[:insert_start]
        
        # D·ªãch t·ª´ng INSERT statement
        translated_statements = []
        
        for i, statement in enumerate(insert_statements):
            try:
                print(f"\n  [{i+1}/{len(insert_statements)}] ƒêang d·ªãch...")
                
                # T√¨m ph·∫ßn VALUES v√† d·ªãch c√°c text fields
                # T√¨m t·∫•t c·∫£ c√°c chu·ªói N'...' trong statement
                pattern = r"N'([^']*)'"
                matches = re.findall(pattern, statement)
                
                print(f"    üìä T√¨m th·∫•y {len(matches)} text fields")
                
                # D·ªãch t·ª´ng text field (ch·ªâ 5 c·ªôt c·ª• th·ªÉ)
                translated_statement = statement
                for j, text_content in enumerate(matches):
                    if text_content and len(text_content.strip()) > 3:
                        # Ki·ªÉm tra xem c√≥ ph·∫£i l√† text ti·∫øng Anh kh√¥ng
                        if is_english_text(text_content):
                            # Ch·ªâ d·ªãch 5 c·ªôt c·ª• th·ªÉ d·ª±a tr√™n n·ªôi dung
                            should_translate = False
                            column_name = ""
                            
                            # Ki·ªÉm tra xem c√≥ ph·∫£i l√† 5 c·ªôt c·∫ßn d·ªãch kh√¥ng
                            if text_content == "Male":
                                should_translate = True
                                column_name = "Gender"
                            elif text_content == "Excellent":
                                should_translate = True
                                column_name = "Condition"
                            elif text_content == "Stainless Steel":
                                should_translate = True
                                column_name = "CaseMaterial"
                            elif "Used Breitling" in text_content and len(text_content) > 50:
                                should_translate = True
                                column_name = "Description"
                            elif "warranty" in text_content.lower():
                                should_translate = True
                                column_name = "WarrantyInfo"
                            
                            if should_translate:
                                print(f"      üîÑ D·ªãch {column_name}: {text_content[:50]}...")
                                translated_text = translate_text_with_api(text_content, translator, translation_cache)
                                
                                # Thay th·∫ø trong statement
                                old_pattern = f"N'{text_content}'"
                                new_pattern = f"N'{translated_text}'"
                                translated_statement = translated_statement.replace(old_pattern, new_pattern)
                            else:
                                print(f"      ‚è≠Ô∏è Gi·ªØ nguy√™n: {text_content[:30]}...")
                        else:
                            print(f"      ‚è≠Ô∏è B·ªè qua (kh√¥ng ph·∫£i ti·∫øng Anh): {text_content[:30]}...")
                
                translated_statements.append(translated_statement)
                
            except Exception as e:
                print(f"  ‚ö†Ô∏è L·ªói d·ªãch statement {i+1}: {e}")
                translated_statements.append(statement)  # Gi·ªØ nguy√™n n·∫øu l·ªói
                continue
        
        # Ghi file k·∫øt qu·∫£
        output_file = "Products_Vietnamese_Selective.sql"
        print(f"\nüíæ GHI FILE K·∫æT QU·∫¢: {output_file}")
        print("=" * 50)
        
        with open(output_file, 'w', encoding='utf-8') as file:
            file.write(header_content)
            file.write('\n\n')
            file.write('\n'.join(translated_statements))
            file.write('\n')
        
        print(f"‚úÖ ƒê√£ ghi file th√†nh c√¥ng!")
        print(f"üìÅ File k·∫øt qu·∫£: {output_file}")
        
        # L∆∞u cache ƒë·ªÉ s·ª≠ d·ª•ng sau
        with open('translation_cache_selective.json', 'w', encoding='utf-8') as cache_file:
            json.dump(translation_cache, cache_file, ensure_ascii=False, indent=2)
        
        print(f"üíæ ƒê√£ l∆∞u cache d·ªãch thu·∫≠t: translation_cache_selective.json")
        
        # Hi·ªÉn th·ªã m·∫´u k·∫øt qu·∫£
        print(f"\nüìã M·∫™U K·∫æT QU·∫¢ D·ªäCH:")
        print("=" * 60)
        
        for i, statement in enumerate(translated_statements):
            print(f"\nüî∏ S·∫¢N PH·∫®M {i+1}:")
            
            # T√¨m c√°c text fields ƒë√£ d·ªãch
            values_match = re.search(r'VALUES\s*\(([^)]+)\)', statement, re.DOTALL)
            if values_match:
                values = parse_values(values_match.group(1))
                if len(values) >= 33:
                    print(f"   Description: {values[3][:100] + '...' if len(values[3]) > 100 else values[3]}")
                    print(f"   Gender: {values[15]}")
                    print(f"   Condition: {values[16]}")
                    print(f"   CaseMaterial: {values[17]}")
                    print(f"   WarrantyInfo: {values[32][:100] + '...' if len(values[32]) > 100 else values[32]}")
            
            print("   " + "-" * 40)
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return False

def get_column_name(index):
    """L·∫•y t√™n c·ªôt t·ª´ index"""
    column_names = {
        3: "Description",
        15: "Gender", 
        16: "Condition",
        17: "CaseMaterial",
        32: "WarrantyInfo"
    }
    return column_names.get(index, f"Column_{index}")

def main():
    print("üéØ SCRIPT D·ªäCH THU·∫¨T SQL CH·ªåN L·ªåC")
    print("=" * 60)
    
    # Th·ª±c hi·ªán d·ªãch
    success = translate_sql_file()
    
    if success:
        print("\nüéâ HO√ÄN TH√ÄNH D·ªäCH THU·∫¨T!")
        print("=" * 60)
        print("‚úÖ ƒê√£ d·ªãch 5 c·ªôt c·ª• th·ªÉ sang ti·∫øng Vi·ªát:")
        print("   - Description")
        print("   - Gender") 
        print("   - Condition")
        print("   - CaseMaterial")
        print("   - WarrantyInfo")
        print("‚úÖ ƒê√£ gi·ªØ nguy√™n t·∫•t c·∫£ c√°c c·ªôt kh√°c")
        print("‚úÖ ƒê√£ s·ª≠ d·ª•ng API d·ªãch thu·∫≠t")
        print("‚úÖ ƒê√£ l∆∞u cache ƒë·ªÉ t√°i s·ª≠ d·ª•ng")
        
    else:
        print("\nüí• D·ªäCH THU·∫¨T TH·∫§T B·∫†I!")

if __name__ == "__main__":
    main()
