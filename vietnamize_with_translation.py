import pyodbc
import pandas as pd
import numpy as np
from datetime import datetime
import re
import requests
import json
import time
from urllib.parse import quote

class CompleteDatabaseVietnamizer:
    def __init__(self, connection_string):
        self.connection_string = connection_string
        self.conn = None
        self.translation_cache = {}  # Cache ƒë·ªÉ tr√°nh d·ªãch l·∫°i
        
    def connect(self):
        """K·∫øt n·ªëi ƒë·∫øn database"""
        try:
            self.conn = pyodbc.connect(self.connection_string)
            print("‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!")
            return True
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
            return False
    
    def close(self):
        """ƒê√≥ng k·∫øt n·ªëi"""
        if self.conn:
            self.conn.close()
            print("üîí ƒê√£ ƒë√≥ng k·∫øt n·ªëi database")
    
    def translate_text(self, text, context="luxury watch"):
        """D·ªãch vƒÉn b·∫£n s·ª≠ d·ª•ng API mi·ªÖn ph√≠"""
        if not text or len(text.strip()) < 3:
            return text
        
        # Ki·ªÉm tra cache
        if text in self.translation_cache:
            return self.translation_cache[text]
        
        try:
            # S·ª≠ d·ª•ng LibreTranslate API (mi·ªÖn ph√≠)
            url = "https://libretranslate.de/translate"
            
            # Th√™m context cho d·ªãch thu·∫≠t ch√≠nh x√°c h∆°n
            context_text = f"Context: {context}. Text: {text}"
            
            payload = {
                "q": text,
                "source": "en",
                "target": "vi",
                "format": "text"
            }
            
            headers = {
                "Content-Type": "application/json"
            }
            
            response = requests.post(url, json=payload, headers=headers, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                translated_text = result.get("translatedText", text)
                
                # Cache k·∫øt qu·∫£
                self.translation_cache[text] = translated_text
                
                # Delay ƒë·ªÉ tr√°nh rate limit
                time.sleep(0.5)
                
                return translated_text
            else:
                print(f"‚ö†Ô∏è L·ªói API d·ªãch: {response.status_code}")
                return text
                
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói d·ªãch thu·∫≠t: {e}")
            return text
    
    def fix_encoding_issues(self):
        """S·ª≠a l·ªói encoding cho d·ªØ li·ªáu b·ªã h·ªèng"""
        try:
            cursor = self.conn.cursor()
            
            print("\nüîß S·ª¨A L·ªñI ENCODING:")
            print("=" * 50)
            
            # S·ª≠a l·ªói encoding cho Condition
            encoding_fixes = {
                'Xu?t s?c': 'Xu·∫•t s·∫Øc',
                'R?t t?t': 'R·∫•t t·ªët',
                'T?t': 'T·ªët',
                'Kh?': 'Kh√°',
                'K?m': 'K√©m',
                'N?': 'N·ªØ'
            }
            
            for corrupted, fixed in encoding_fixes.items():
                cursor.execute("UPDATE Products SET Condition = ? WHERE Condition = ?", (fixed, corrupted))
                affected = cursor.rowcount
                if affected > 0:
                    print(f"  {corrupted} ‚Üí {fixed}: {affected} s·∫£n ph·∫©m")
                
                cursor.execute("UPDATE Products SET Gender = ? WHERE Gender = ?", (fixed, corrupted))
                affected = cursor.rowcount
                if affected > 0:
                    print(f"  {corrupted} ‚Üí {fixed}: {affected} s·∫£n ph·∫©m")
            
            self.conn.commit()
            print("‚úÖ ƒê√£ s·ª≠a l·ªói encoding!")
            
            cursor.close()
            
        except Exception as e:
            print(f"‚ùå L·ªói s·ª≠a encoding: {e}")
            self.conn.rollback()
    
    def vietnamize_simple_fields(self):
        """Vi·ªát h√≥a c√°c tr∆∞·ªùng ƒë∆°n gi·∫£n"""
        try:
            cursor = self.conn.cursor()
            
            print("\nüáªüá≥ VI·ªÜT H√ìA C√ÅC TR∆Ø·ªúNG ƒê∆†N GI·∫¢N:")
            print("=" * 50)
            
            # Mapping t·ª´ ti·∫øng Anh sang ti·∫øng Vi·ªát
            condition_mapping = {
                'Excellent': 'Xu·∫•t s·∫Øc',
                'Very Good': 'R·∫•t t·ªët',
                'Good': 'T·ªët',
                'Fair': 'Kh√°',
                'Poor': 'K√©m',
                'New': 'M·ªõi',
                'Vintage': 'C·ªï ƒëi·ªÉn',
                'Pre-owned': 'ƒê√£ qua s·ª≠ d·ª•ng',
                'Unworn': 'Ch∆∞a ƒëeo'
            }
            
            gender_mapping = {
                'Men': 'Nam',
                'Women': 'N·ªØ',
                'Unisex': 'Unisex',
                'Male': 'Nam',
                'Female': 'N·ªØ'
            }
            
            certificate_mapping = {
                'Original Box': 'H·ªôp g·ªëc',
                'Original Papers': 'Gi·∫•y t·ªù g·ªëc',
                'Warranty Card': 'Th·∫ª b·∫£o h√†nh',
                'Service Book': 'S·ªï b·∫£o h√†nh',
                'No Papers': 'Kh√¥ng c√≥ gi·∫•y t·ªù',
                'Box and Papers': 'H·ªôp v√† gi·∫•y t·ªù',
                'Box Only': 'Ch·ªâ c√≥ h·ªôp',
                'Papers Only': 'Ch·ªâ c√≥ gi·∫•y t·ªù',
                'C√≥': 'C√≥ gi·∫•y t·ªù',
                'Yes': 'C√≥',
                'No': 'Kh√¥ng'
            }
            
            warranty_mapping = {
                '1 Year': '1 nƒÉm',
                '2 Years': '2 nƒÉm',
                '3 Years': '3 nƒÉm',
                '5 Years': '5 nƒÉm',
                'Lifetime': 'Tr·ªçn ƒë·ªùi',
                'No Warranty': 'Kh√¥ng b·∫£o h√†nh',
                'International Warranty': 'B·∫£o h√†nh qu·ªëc t·∫ø',
                'Manufacturer Warranty': 'B·∫£o h√†nh nh√† s·∫£n xu·∫•t',
                '5 NƒÉm': '5 nƒÉm'
            }
            
            # C·∫≠p nh·∫≠t Condition
            print("üîÑ C·∫≠p nh·∫≠t Condition...")
            for eng, vn in condition_mapping.items():
                cursor.execute("UPDATE Products SET Condition = ? WHERE Condition = ?", (vn, eng))
                affected = cursor.rowcount
                if affected > 0:
                    print(f"  {eng} ‚Üí {vn}: {affected} s·∫£n ph·∫©m")
            
            # C·∫≠p nh·∫≠t Gender
            print("üîÑ C·∫≠p nh·∫≠t Gender...")
            for eng, vn in gender_mapping.items():
                cursor.execute("UPDATE Products SET Gender = ? WHERE Gender = ?", (vn, eng))
                affected = cursor.rowcount
                if affected > 0:
                    print(f"  {eng} ‚Üí {vn}: {affected} s·∫£n ph·∫©m")
            
            # C·∫≠p nh·∫≠t Certificate
            print("üîÑ C·∫≠p nh·∫≠t Certificate...")
            for eng, vn in certificate_mapping.items():
                cursor.execute("UPDATE Products SET Certificate = ? WHERE Certificate = ?", (vn, eng))
                affected = cursor.rowcount
                if affected > 0:
                    print(f"  {eng} ‚Üí {vn}: {affected} s·∫£n ph·∫©m")
            
            # C·∫≠p nh·∫≠t WarrantyInfo
            print("üîÑ C·∫≠p nh·∫≠t WarrantyInfo...")
            for eng, vn in warranty_mapping.items():
                cursor.execute("UPDATE Products SET WarrantyInfo = ? WHERE WarrantyInfo = ?", (vn, eng))
                affected = cursor.rowcount
                if affected > 0:
                    print(f"  {eng} ‚Üí {vn}: {affected} s·∫£n ph·∫©m")
            
            self.conn.commit()
            print("‚úÖ ƒê√£ vi·ªát h√≥a c√°c tr∆∞·ªùng ƒë∆°n gi·∫£n!")
            
            cursor.close()
            
        except Exception as e:
            print(f"‚ùå L·ªói vi·ªát h√≥a tr∆∞·ªùng ƒë∆°n gi·∫£n: {e}")
            self.conn.rollback()
    
    def vietnamize_complex_fields_with_translation(self):
        """Vi·ªát h√≥a c√°c tr∆∞·ªùng ph·ª©c t·∫°p b·∫±ng API d·ªãch thu·∫≠t"""
        try:
            cursor = self.conn.cursor()
            
            print("\nüåê VI·ªÜT H√ìA C√ÅC TR∆Ø·ªúNG PH·ª®C T·∫†P V·ªöI API D·ªäCH THU·∫¨T:")
            print("=" * 60)
            
            # L·∫•y t·∫•t c·∫£ c√°c tr∆∞·ªùng c·∫ßn d·ªãch
            fields_to_translate = ['Description', 'WarrantyInfo', 'Certificate']
            
            for field in fields_to_translate:
                print(f"\nüîÑ ƒêang d·ªãch tr∆∞·ªùng {field}...")
                
                # L·∫•y c√°c gi√° tr·ªã unique c·∫ßn d·ªãch
                cursor.execute(f"SELECT DISTINCT {field} FROM Products WHERE {field} IS NOT NULL AND LEN({field}) > 20")
                unique_values = cursor.fetchall()
                
                translated_count = 0
                for value_tuple in unique_values:
                    original_text = value_tuple[0]
                    
                    # B·ªè qua n·∫øu ƒë√£ c√≥ ti·∫øng Vi·ªát
                    if re.search(r'[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë]', original_text, re.IGNORECASE):
                        continue
                    
                    # B·ªè qua n·∫øu qu√° ng·∫Øn
                    if len(original_text.strip()) < 10:
                        continue
                    
                    print(f"  D·ªãch: {original_text[:50]}...")
                    
                    # D·ªãch v·ªõi context ph√π h·ª£p
                    context = "luxury watch website"
                    if field == "WarrantyInfo":
                        context = "luxury watch warranty information"
                    elif field == "Certificate":
                        context = "luxury watch authentication certificate"
                    elif field == "Description":
                        context = "luxury watch product description"
                    
                    translated_text = self.translate_text(original_text, context)
                    
                    if translated_text != original_text:
                        cursor.execute(f"UPDATE Products SET {field} = ? WHERE {field} = ?", (translated_text, original_text))
                        translated_count += 1
                        print(f"    ‚Üí {translated_text[:50]}...")
                
                print(f"  ‚úÖ ƒê√£ d·ªãch {translated_count} gi√° tr·ªã trong tr∆∞·ªùng {field}")
                
                # Commit sau m·ªói tr∆∞·ªùng
                self.conn.commit()
            
            cursor.close()
            
        except Exception as e:
            print(f"‚ùå L·ªói vi·ªát h√≥a tr∆∞·ªùng ph·ª©c t·∫°p: {e}")
            self.conn.rollback()
    
    def convert_prices_to_vnd(self):
        """Chuy·ªÉn ƒë·ªïi gi√° t·ª´ USD sang VND"""
        try:
            cursor = self.conn.cursor()
            
            print("\nüí∞ CHUY·ªÇN ƒê·ªîI GI√Å T·ª™ USD SANG VND:")
            print("=" * 50)
            
            # Chuy·ªÉn ƒë·ªïi gi√° (t·ª∑ gi√° 1 USD = 24,500 VND)
            cursor.execute("""
                UPDATE Products 
                SET Price = Price * 24500, 
                    CapitalPrice = CapitalPrice * 24500, 
                    CreditCardPrice = CreditCardPrice * 24500 
                WHERE Price > 0 AND Price < 100000
            """)
            affected = cursor.rowcount
            print(f"  ƒê√£ chuy·ªÉn ƒë·ªïi gi√° cho {affected} s·∫£n ph·∫©m")
            
            self.conn.commit()
            print("‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi gi√°!")
            
            cursor.close()
            
        except Exception as e:
            print(f"‚ùå L·ªói chuy·ªÉn ƒë·ªïi gi√°: {e}")
            self.conn.rollback()
    
    def vietnamize_other_tables(self):
        """Vi·ªát h√≥a c√°c b·∫£ng kh√°c"""
        try:
            cursor = self.conn.cursor()
            
            print("\nüáªüá≥ VI·ªÜT H√ìA C√ÅC B·∫¢NG KH√ÅC:")
            print("=" * 50)
            
            # Vi·ªát h√≥a Categories
            cursor.execute("SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Categories'")
            if cursor.fetchone()[0] > 0:
                print("üîÑ Vi·ªát h√≥a Categories...")
                category_mapping = {
                    'Luxury': 'Xa x·ªâ',
                    'Sport': 'Th·ªÉ thao',
                    'Dress': 'C√¥ng s·ªü',
                    'Casual': 'Th∆∞·ªùng ng√†y',
                    'Smart': 'Th√¥ng minh',
                    'Classic': 'C·ªï ƒëi·ªÉn',
                    'Modern': 'Hi·ªán ƒë·∫°i'
                }
                
                for eng, vn in category_mapping.items():
                    cursor.execute("UPDATE Categories SET Name = ? WHERE Name = ?", (vn, eng))
                    affected = cursor.rowcount
                    if affected > 0:
                        print(f"  {eng} ‚Üí {vn}: {affected} danh m·ª•c")
            
            # Vi·ªát h√≥a Brands (gi·ªØ nguy√™n t√™n th∆∞∆°ng hi·ªáu)
            cursor.execute("SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Brands'")
            if cursor.fetchone()[0] > 0:
                print("üîÑ Ki·ªÉm tra Brands...")
                # Gi·ªØ nguy√™n t√™n th∆∞∆°ng hi·ªáu nh∆∞ Rolex, Omega, v.v.
                print("  Gi·ªØ nguy√™n t√™n th∆∞∆°ng hi·ªáu")
            
            self.conn.commit()
            print("‚úÖ ƒê√£ vi·ªát h√≥a c√°c b·∫£ng kh√°c!")
            
            cursor.close()
            
        except Exception as e:
            print(f"‚ùå L·ªói vi·ªát h√≥a c√°c b·∫£ng kh√°c: {e}")
            self.conn.rollback()
    
    def verify_final_results(self):
        """X√°c minh k·∫øt qu·∫£ cu·ªëi c√πng"""
        try:
            cursor = self.conn.cursor()
            
            print("\n‚úÖ X√ÅC MINH K·∫æT QU·∫¢ CU·ªêI C√ôNG:")
            print("=" * 50)
            
            # Ki·ªÉm tra d·ªØ li·ªáu sau khi vi·ªát h√≥a
            cursor.execute("""
                SELECT TOP 3 Id, Name, Model, Condition, Gender, Certificate, 
                       SUBSTRING(WarrantyInfo, 1, 100) as WarrantyInfo_Short,
                       Price, CapitalPrice, CreditCardPrice
                FROM Products
            """)
            
            products = cursor.fetchall()
            print("üì¶ SAMPLE PRODUCTS SAU VI·ªÜT H√ìA HO√ÄN CH·ªàNH:")
            for product in products:
                print(f"  ID: {product[0]}")
                print(f"  Name: {product[1]} (gi·ªØ nguy√™n)")
                print(f"  Model: {product[2]} (gi·ªØ nguy√™n)")
                print(f"  Condition: {product[3]}")
                print(f"  Gender: {product[4]}")
                print(f"  Certificate: {product[5]}")
                print(f"  WarrantyInfo: {product[6]}...")
                print(f"  Price: {product[7]:,.0f} VND")
                print(f"  CapitalPrice: {product[8]:,.0f} VND")
                print(f"  CreditCardPrice: {product[9]:,.0f} VND")
                print("  " + "-" * 30)
            
            # Th·ªëng k√™
            cursor.execute("SELECT COUNT(*) FROM Products WHERE Condition IN ('Xu·∫•t s·∫Øc', 'R·∫•t t·ªët', 'T·ªët', 'Kh√°', 'K√©m', 'M·ªõi', 'C·ªï ƒëi·ªÉn')")
            vietnamized_condition = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM Products WHERE Gender IN ('Nam', 'N·ªØ', 'Unisex')")
            vietnamized_gender = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM Products WHERE Price > 1000000")  # Gi√° VND
            vietnamized_price = cursor.fetchone()[0]
            
            print(f"\nüìä TH·ªêNG K√ä VI·ªÜT H√ìA:")
            print(f"  Condition ƒë√£ vi·ªát h√≥a: {vietnamized_condition} s·∫£n ph·∫©m")
            print(f"  Gender ƒë√£ vi·ªát h√≥a: {vietnamized_gender} s·∫£n ph·∫©m")
            print(f"  Gi√° ƒë√£ chuy·ªÉn VND: {vietnamized_price} s·∫£n ph·∫©m")
            print(f"  Cache d·ªãch thu·∫≠t: {len(self.translation_cache)} t·ª´")
            
            cursor.close()
            
        except Exception as e:
            print(f"‚ùå L·ªói x√°c minh: {e}")
    
    def run_complete_vietnamization(self):
        """Ch·∫°y vi·ªát h√≥a ho√†n ch·ªânh"""
        print("üöÄ B·∫ÆT ƒê·∫¶U VI·ªÜT H√ìA HO√ÄN CH·ªàNH V·ªöI API D·ªäCH THU·∫¨T")
        print("=" * 70)
        print("‚ö†Ô∏è  L∆∞u √Ω: Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t v√†i ph√∫t do s·ª≠ d·ª•ng API d·ªãch thu·∫≠t")
        print("=" * 70)
        
        if not self.connect():
            return False
        
        try:
            # S·ª≠a l·ªói encoding
            self.fix_encoding_issues()
            
            # Vi·ªát h√≥a c√°c tr∆∞·ªùng ƒë∆°n gi·∫£n
            self.vietnamize_simple_fields()
            
            # Vi·ªát h√≥a c√°c tr∆∞·ªùng ph·ª©c t·∫°p v·ªõi API d·ªãch thu·∫≠t
            self.vietnamize_complex_fields_with_translation()
            
            # Chuy·ªÉn ƒë·ªïi gi√°
            self.convert_prices_to_vnd()
            
            # Vi·ªát h√≥a c√°c b·∫£ng kh√°c
            self.vietnamize_other_tables()
            
            # X√°c minh k·∫øt qu·∫£
            self.verify_final_results()
            
            print("\nüéâ VI·ªÜT H√ìA HO√ÄN CH·ªàNH TH√ÄNH C√îNG!")
            print("=" * 70)
            print("‚úÖ ƒê√£ s·ª≠a l·ªói encoding")
            print("‚úÖ ƒê√£ vi·ªát h√≥a c√°c tr∆∞·ªùng ƒë∆°n gi·∫£n")
            print("‚úÖ ƒê√£ d·ªãch c√°c n·ªôi dung ph·ª©c t·∫°p b·∫±ng API")
            print("‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi gi√° t·ª´ USD sang VND")
            print("‚úÖ ƒê√£ vi·ªát h√≥a c√°c b·∫£ng kh√°c")
            print("‚úÖ C·ªôt Name v√† Model ƒë∆∞·ª£c gi·ªØ nguy√™n nh∆∞ y√™u c·∫ßu")
            print(f"‚úÖ ƒê√£ cache {len(self.translation_cache)} b·∫£n d·ªãch")
            
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói trong qu√° tr√¨nh vi·ªát h√≥a: {e}")
            return False
        finally:
            self.close()

def main():
    # Connection string
    connection_string = "DRIVER={SQL Server};SERVER=localhost;DATABASE=Shopping_Demo;Trusted_Connection=yes;"
    
    # T·∫°o instance v√† ch·∫°y vi·ªát h√≥a ho√†n ch·ªânh
    vietnamizer = CompleteDatabaseVietnamizer(connection_string)
    success = vietnamizer.run_complete_vietnamization()
    
    if success:
        print("\nüéØ K·∫æT QU·∫¢: Vi·ªát h√≥a ho√†n ch·ªânh th√†nh c√¥ng!")
    else:
        print("\nüí• K·∫æT QU·∫¢: Vi·ªát h√≥a ho√†n ch·ªânh th·∫•t b·∫°i!")

if __name__ == "__main__":
    main()
