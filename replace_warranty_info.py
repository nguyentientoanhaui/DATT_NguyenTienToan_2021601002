#!/usr/bin/env python3
"""
Script ƒë·ªÉ thay th·∫ø "Bob's Watches" th√†nh "Aurum Watches" trong database
T·∫°o b·ªüi: Assistant
Ng√†y: 2025-01-27
"""

import pyodbc
import datetime
import logging

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('warranty_update.log'),
        logging.StreamHandler()
    ]
)

def get_connection():
    """T·∫°o k·∫øt n·ªëi ƒë·∫øn SQL Server"""
    try:
        # Thay ƒë·ªïi connection string theo c·∫•u h√¨nh c·ªßa b·∫°n
        connection_string = (
            "Driver={ODBC Driver 17 for SQL Server};"
            "Server=localhost;"  # Ho·∫∑c t√™n server c·ªßa b·∫°n
            "Database=Shopping_Demo;"
            "Trusted_Connection=yes;"
        )
        
        conn = pyodbc.connect(connection_string)
        logging.info("‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn database")
        return conn
        
    except Exception as e:
        logging.error(f"‚ùå L·ªói k·∫øt n·ªëi database: {str(e)}")
        return None

def backup_database(cursor):
    """T·∫°o backup database"""
    try:
        backup_file = f"C:\\Backup\\Shopping_Demo_Warranty_Backup_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.bak"
        
        backup_sql = f"""
        BACKUP DATABASE [Shopping_Demo] 
        TO DISK = '{backup_file}'
        WITH FORMAT, INIT;
        """
        
        logging.info("üîÑ ƒêang t·∫°o backup database...")
        cursor.execute(backup_sql)
        logging.info(f"‚úÖ Backup th√†nh c√¥ng: {backup_file}")
        return True
        
    except Exception as e:
        logging.error(f"‚ùå L·ªói t·∫°o backup: {str(e)}")
        return False

def check_records_to_update(cursor):
    """Ki·ªÉm tra s·ªë l∆∞·ª£ng b·∫£n ghi c·∫ßn c·∫≠p nh·∫≠t"""
    try:
        query = """
        SELECT COUNT(*) as count
        FROM [dbo].[Products] 
        WHERE [WarrantyInfo] LIKE '%Bob''s Watches%'
        """
        
        cursor.execute(query)
        result = cursor.fetchone()
        count = result.count if result else 0
        
        logging.info(f"üìä S·ªë b·∫£n ghi c·∫ßn c·∫≠p nh·∫≠t: {count}")
        return count
        
    except Exception as e:
        logging.error(f"‚ùå L·ªói ki·ªÉm tra b·∫£n ghi: {str(e)}")
        return 0

def preview_records(cursor):
    """Preview m·ªôt s·ªë b·∫£n ghi s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t"""
    try:
        query = """
        SELECT TOP 5 
            [Id],
            [Name],
            LEFT([WarrantyInfo], 100) as [WarrantyInfo_Preview]
        FROM [dbo].[Products] 
        WHERE [WarrantyInfo] LIKE '%Bob''s Watches%'
        """
        
        cursor.execute(query)
        records = cursor.fetchall()
        
        logging.info("üìã Preview b·∫£n ghi s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t:")
        for record in records:
            logging.info(f"  ID: {record.Id}, Name: {record.Name}")
            logging.info(f"    Warranty: {record.WarrantyInfo_Preview}...")
            
        return True
        
    except Exception as e:
        logging.error(f"‚ùå L·ªói preview b·∫£n ghi: {str(e)}")
        return False

def update_warranty_info(cursor):
    """Th·ª±c hi·ªán c·∫≠p nh·∫≠t th√¥ng tin b·∫£o h√†nh"""
    try:
        # B·∫Øt ƒë·∫ßu transaction
        cursor.execute("BEGIN TRANSACTION")
        
        update_sql = """
        UPDATE [dbo].[Products] 
        SET [WarrantyInfo] = REPLACE([WarrantyInfo], 'Bob''s Watches', 'Aurum Watches'),
            [UpdatedDate] = GETDATE()
        WHERE [WarrantyInfo] LIKE '%Bob''s Watches%'
        """
        
        logging.info("üîÑ ƒêang th·ª±c hi·ªán c·∫≠p nh·∫≠t...")
        cursor.execute(update_sql)
        updated_count = cursor.rowcount
        
        logging.info(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t {updated_count} b·∫£n ghi")
        
        # Verification
        verify_sql = """
        SELECT 
            COUNT(*) as remaining_bobs
        FROM [dbo].[Products] 
        WHERE [WarrantyInfo] LIKE '%Bob''s Watches%'
        """
        
        cursor.execute(verify_sql)
        remaining = cursor.fetchone().remaining_bobs
        
        if remaining > 0:
            logging.warning(f"‚ö†Ô∏è  V·∫´n c√≤n {remaining} b·∫£n ghi ch·ª©a 'Bob's Watches'")
            cursor.execute("ROLLBACK TRANSACTION")
            return False
        else:
            logging.info("‚úÖ T·∫•t c·∫£ 'Bob's Watches' ƒë√£ ƒë∆∞·ª£c thay th·∫ø")
            cursor.execute("COMMIT TRANSACTION")
            return True
            
    except Exception as e:
        logging.error(f"‚ùå L·ªói c·∫≠p nh·∫≠t: {str(e)}")
        cursor.execute("ROLLBACK TRANSACTION")
        return False

def final_verification(cursor):
    """Ki·ªÉm tra cu·ªëi c√πng"""
    try:
        query = """
        SELECT 
            COUNT(*) as total_products_with_warranty,
            SUM(CASE WHEN [WarrantyInfo] LIKE '%Aurum Watches%' THEN 1 ELSE 0 END) as aurum_watches_count,
            SUM(CASE WHEN [WarrantyInfo] LIKE '%Bob''s Watches%' THEN 1 ELSE 0 END) as bobs_watches_remaining
        FROM [dbo].[Products] 
        WHERE [WarrantyInfo] IS NOT NULL AND [WarrantyInfo] != ''
        """
        
        cursor.execute(query)
        result = cursor.fetchone()
        
        logging.info("=== KI·ªÇM TRA CU·ªêI C√ôNG ===")
        logging.info(f"üìä T·ªïng s·∫£n ph·∫©m c√≥ th√¥ng tin b·∫£o h√†nh: {result.total_products_with_warranty}")
        logging.info(f"‚úÖ S·∫£n ph·∫©m c√≥ 'Aurum Watches': {result.aurum_watches_count}")
        logging.info(f"‚ùå S·∫£n ph·∫©m c√≤n 'Bob's Watches': {result.bobs_watches_remaining}")
        
        return result.bobs_watches_remaining == 0
        
    except Exception as e:
        logging.error(f"‚ùå L·ªói ki·ªÉm tra cu·ªëi: {str(e)}")
        return False

def main():
    """H√†m ch√≠nh"""
    logging.info("üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh c·∫≠p nh·∫≠t th√¥ng tin b·∫£o h√†nh")
    
    # K·∫øt n·ªëi database
    conn = get_connection()
    if not conn:
        return False
    
    try:
        cursor = conn.cursor()
        
        # B∆∞·ªõc 1: T·∫°o backup
        if not backup_database(cursor):
            logging.error("‚ùå Kh√¥ng th·ªÉ t·∫°o backup, d·ª´ng qu√° tr√¨nh")
            return False
        
        # B∆∞·ªõc 2: Ki·ªÉm tra b·∫£n ghi c·∫ßn c·∫≠p nh·∫≠t
        count = check_records_to_update(cursor)
        if count == 0:
            logging.info("‚ÑπÔ∏è  Kh√¥ng c√≥ b·∫£n ghi n√†o c·∫ßn c·∫≠p nh·∫≠t")
            return True
        
        # B∆∞·ªõc 3: Preview b·∫£n ghi
        preview_records(cursor)
        
        # B∆∞·ªõc 4: X√°c nh·∫≠n t·ª´ user
        response = input(f"\nü§î B·∫°n c√≥ mu·ªën c·∫≠p nh·∫≠t {count} b·∫£n ghi? (y/N): ")
        if response.lower() != 'y':
            logging.info("‚ùå Ng∆∞·ªùi d√πng h·ªßy qu√° tr√¨nh c·∫≠p nh·∫≠t")
            return False
        
        # B∆∞·ªõc 5: Th·ª±c hi·ªán c·∫≠p nh·∫≠t
        if not update_warranty_info(cursor):
            logging.error("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i")
            return False
        
        # B∆∞·ªõc 6: Ki·ªÉm tra cu·ªëi c√πng
        if final_verification(cursor):
            logging.info("üéâ Qu√° tr√¨nh c·∫≠p nh·∫≠t ho√†n t·∫•t th√†nh c√¥ng!")
            return True
        else:
            logging.error("‚ùå Ki·ªÉm tra cu·ªëi c√πng th·∫•t b·∫°i")
            return False
            
    except Exception as e:
        logging.error(f"‚ùå L·ªói kh√¥ng mong mu·ªën: {str(e)}")
        return False
        
    finally:
        conn.close()
        logging.info("üîê ƒê√£ ƒë√≥ng k·∫øt n·ªëi database")

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)









