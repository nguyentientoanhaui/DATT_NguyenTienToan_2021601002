#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Database Format Improver
Script Python ƒë·ªÉ c·∫£i thi·ªán ƒë·ªãnh d·∫°ng database v√† chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu
"""

import pyodbc
import pandas as pd
from datetime import datetime
import json
import os
import sys

class DatabaseFormatImprover:
    def __init__(self, connection_string):
        """Kh·ªüi t·∫°o k·∫øt n·ªëi database"""
        self.connection_string = connection_string
        self.conn = None
        self.cursor = None
        
    def connect(self):
        """K·∫øt n·ªëi ƒë·∫øn database"""
        try:
            self.conn = pyodbc.connect(self.connection_string)
            self.cursor = self.conn.cursor()
            print("‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!")
            return True
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi database: {e}")
            return False
    
    def disconnect(self):
        """ƒê√≥ng k·∫øt n·ªëi database"""
        if self.cursor:
            self.cursor.close()
        if self.conn:
            self.conn.close()
        print("üîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi database")
    
    def check_current_collation(self):
        """Ki·ªÉm tra collation hi·ªán t·∫°i c·ªßa database"""
        try:
            query = """
            SELECT 
                name as DatabaseName,
                collation_name as CurrentCollation,
                CASE 
                    WHEN collation_name LIKE '%_CI_AI' THEN 'Case Insensitive, Accent Insensitive'
                    WHEN collation_name LIKE '%_CS_AI' THEN 'Case Sensitive, Accent Insensitive'
                    WHEN collation_name LIKE '%_CI_AS' THEN 'Case Insensitive, Accent Sensitive'
                    WHEN collation_name LIKE '%_CS_AS' THEN 'Case Sensitive, Accent Sensitive'
                    ELSE 'Other'
                END as CollationType
            FROM sys.databases 
            WHERE name = 'Shopping_Demo'
            """
            
            df = pd.read_sql(query, self.conn)
            print("\nüìä TH√îNG TIN COLLATION HI·ªÜN T·∫†I:")
            print(df.to_string(index=False))
            return df
            
        except Exception as e:
            print(f"‚ùå L·ªói ki·ªÉm tra collation: {e}")
            return None
    
    def check_column_collation(self):
        """Ki·ªÉm tra collation c·ªßa c√°c c·ªôt text"""
        try:
            query = """
            SELECT 
                c.name as ColumnName,
                c.collation_name as CurrentCollation,
                t.name as DataType,
                c.max_length as MaxLength
            FROM sys.columns c
            INNER JOIN sys.types t ON c.user_type_id = t.user_type_id
            WHERE c.object_id = OBJECT_ID('Products')
            AND c.name IN ('Condition', 'Gender', 'Certificate', 'WarrantyInfo', 'Name', 'Description')
            ORDER BY c.name
            """
            
            df = pd.read_sql(query, self.conn)
            print("\nüìã COLLATION C√ÅC C·ªòT TEXT:")
            print(df.to_string(index=False))
            return df
            
        except Exception as e:
            print(f"‚ùå L·ªói ki·ªÉm tra collation c·ªôt: {e}")
            return None
    
    def backup_products_table(self):
        """Backup b·∫£ng Products"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_table = f"Products_Backup_{timestamp}"
            
            query = f"SELECT * INTO {backup_table} FROM Products"
            self.cursor.execute(query)
            self.conn.commit()
            
            print(f"‚úÖ ƒê√£ backup b·∫£ng Products th√†nh {backup_table}")
            return backup_table
            
        except Exception as e:
            print(f"‚ùå L·ªói backup: {e}")
            return None
    
    def create_temp_table(self):
        """T·∫°o b·∫£ng temp v·ªõi Unicode support"""
        try:
            create_table_sql = """
            CREATE TABLE Products_Temp (
                Id INT IDENTITY(1,1) PRIMARY KEY,
                Name NVARCHAR(500) COLLATE Vietnamese_CI_AS,
                Price DECIMAL(18,2),
                CapitalPrice DECIMAL(18,2),
                CreditCardPrice DECIMAL(18,2),
                Gender NVARCHAR(50) COLLATE Vietnamese_CI_AS,
                Condition NVARCHAR(200) COLLATE Vietnamese_CI_AS,
                Certificate NVARCHAR(100) COLLATE Vietnamese_CI_AS,
                WarrantyInfo NVARCHAR(200) COLLATE Vietnamese_CI_AS,
                Description NVARCHAR(MAX) COLLATE Vietnamese_CI_AS,
                Image NVARCHAR(500),
                BrandId INT,
                CategoryId INT,
                CreatedAt DATETIME2 DEFAULT GETDATE(),
                UpdatedAt DATETIME2 DEFAULT GETDATE()
            )
            """
            
            self.cursor.execute(create_table_sql)
            self.conn.commit()
            print("‚úÖ ƒê√£ t·∫°o b·∫£ng Products_Temp v·ªõi Unicode support")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói t·∫°o b·∫£ng temp: {e}")
            return False
    
    def copy_data_to_temp(self):
        """Sao ch√©p d·ªØ li·ªáu t·ª´ b·∫£ng g·ªëc sang b·∫£ng temp"""
        try:
            copy_sql = """
            INSERT INTO Products_Temp (Name, Price, CapitalPrice, CreditCardPrice, Gender, Condition, Certificate, WarrantyInfo, Description, Image, BrandId, CategoryId)
            SELECT Name, Price, CapitalPrice, CreditCardPrice, Gender, Condition, Certificate, WarrantyInfo, Description, Image, BrandId, CategoryId
            FROM Products
            """
            
            self.cursor.execute(copy_sql)
            self.conn.commit()
            
            # Ki·ªÉm tra s·ªë l∆∞·ª£ng b·∫£n ghi
            self.cursor.execute("SELECT COUNT(*) FROM Products")
            original_count = self.cursor.fetchone()[0]
            
            self.cursor.execute("SELECT COUNT(*) FROM Products_Temp")
            temp_count = self.cursor.fetchone()[0]
            
            print(f"‚úÖ ƒê√£ sao ch√©p {temp_count}/{original_count} b·∫£n ghi")
            return temp_count == original_count
            
        except Exception as e:
            print(f"‚ùå L·ªói sao ch√©p d·ªØ li·ªáu: {e}")
            return False
    
    def test_unicode_support(self):
        """Test Unicode support trong b·∫£ng temp"""
        try:
            test_data = [
                ("ƒê·ªìng h·ªì Rolex Submariner", "Nam", "Xu·∫•t s·∫Øc", "C√≥", "5 NƒÉm"),
                ("ƒê·ªìng h·ªì Omega Speedmaster", "Nam", "R·∫•t t·ªët", "Kh√¥ng", "3 NƒÉm"),
                ("ƒê·ªìng h·ªì Cartier Tank", "N·ªØ", "T·ªët", "C√≥", "2 NƒÉm")
            ]
            
            insert_sql = """
            INSERT INTO Products_Temp (Name, Gender, Condition, Certificate, WarrantyInfo)
            VALUES (?, ?, ?, ?, ?)
            """
            
            for data in test_data:
                self.cursor.execute(insert_sql, data)
            
            self.conn.commit()
            
            # Ki·ªÉm tra d·ªØ li·ªáu test
            query = "SELECT Name, Gender, Condition, Certificate, WarrantyInfo FROM Products_Temp WHERE Name LIKE '%ƒê·ªìng h·ªì%'"
            df = pd.read_sql(query, self.conn)
            
            print("\nüß™ TEST UNICODE SUPPORT:")
            print(df.to_string(index=False))
            
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói test Unicode: {e}")
            return False
    
    def replace_original_table(self):
        """Thay th·∫ø b·∫£ng g·ªëc b·∫±ng b·∫£ng temp"""
        try:
            # X√≥a b·∫£ng g·ªëc
            self.cursor.execute("DROP TABLE Products")
            
            # ƒê·ªïi t√™n b·∫£ng temp
            self.cursor.execute("EXEC sp_rename 'Products_Temp', 'Products'")
            
            # T·∫°o l·∫°i index
            indexes = [
                "CREATE INDEX IX_Products_Condition ON Products(Condition)",
                "CREATE INDEX IX_Products_Gender ON Products(Gender)",
                "CREATE INDEX IX_Products_Certificate ON Products(Certificate)",
                "CREATE INDEX IX_Products_BrandId ON Products(BrandId)",
                "CREATE INDEX IX_Products_CategoryId ON Products(CategoryId)",
                "CREATE INDEX IX_Products_Price ON Products(Price)"
            ]
            
            for index_sql in indexes:
                self.cursor.execute(index_sql)
            
            self.conn.commit()
            print("‚úÖ ƒê√£ thay th·∫ø b·∫£ng Products v√† t·∫°o l·∫°i index")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói thay th·∫ø b·∫£ng: {e}")
            return False
    
    def vietnamize_data(self):
        """Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu sang ti·∫øng Vi·ªát"""
        try:
            # Mapping d·ªØ li·ªáu
            mappings = {
                'Condition': {
                    'Excellent': 'Xu·∫•t s·∫Øc',
                    'Very Good': 'R·∫•t t·ªët',
                    'Good': 'T·ªët',
                    'Fair': 'Kh√°',
                    'Poor': 'K√©m',
                    'New': 'M·ªõi',
                    'Pre-owned': 'ƒê√£ s·ª≠ d·ª•ng',
                    'Mint': 'Nh∆∞ m·ªõi',
                    'Near Mint': 'G·∫ßn nh∆∞ m·ªõi'
                },
                'Gender': {
                    'Men': 'Nam',
                    'Women': 'N·ªØ'
                },
                'Certificate': {
                    'Yes': 'C√≥',
                    'No': 'Kh√¥ng',
                    'Available': 'C√≥ s·∫µn',
                    'Not Available': 'Kh√¥ng c√≥',
                    'Included': 'Bao g·ªìm',
                    'Not Included': 'Kh√¥ng bao g·ªìm'
                },
                'WarrantyInfo': {
                    '1 Year': '1 NƒÉm',
                    '2 Years': '2 NƒÉm',
                    '3 Years': '3 NƒÉm',
                    '5 Years': '5 NƒÉm',
                    'Lifetime': 'Tr·ªçn ƒë·ªùi',
                    'No Warranty': 'Kh√¥ng b·∫£o h√†nh',
                    'Manufacturer Warranty': 'B·∫£o h√†nh nh√† s·∫£n xu·∫•t',
                    'International Warranty': 'B·∫£o h√†nh qu·ªëc t·∫ø'
                }
            }
            
            # Th·ª±c hi·ªán chuy·ªÉn ƒë·ªïi
            for field, mapping in mappings.items():
                for english, vietnamese in mapping.items():
                    update_sql = f"UPDATE Products SET {field} = ? WHERE {field} = ?"
                    self.cursor.execute(update_sql, (vietnamese, english))
            
            # Chuy·ªÉn ƒë·ªïi gi√° t·ª´ USD sang VND
            price_sql = """
            UPDATE Products 
            SET Price = Price * 24500, CapitalPrice = CapitalPrice * 24500, CreditCardPrice = CreditCardPrice * 24500
            WHERE Price > 0 AND Price < 100000
            """
            self.cursor.execute(price_sql)
            
            self.conn.commit()
            print("‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu sang ti·∫øng Vi·ªát")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói vi·ªát h√≥a: {e}")
            return False
    
    def check_results(self):
        """Ki·ªÉm tra k·∫øt qu·∫£ sau khi chuy·ªÉn ƒë·ªïi"""
        try:
            # Th·ªëng k√™ t·ªïng quan
            stats_sql = """
            SELECT 
                COUNT(*) as TotalProducts,
                SUM(CASE WHEN Condition = N'Xu·∫•t s·∫Øc' THEN 1 ELSE 0 END) as Xu·∫•tS·∫ØcCount,
                SUM(CASE WHEN Gender = N'Nam' THEN 1 ELSE 0 END) as NamCount,
                SUM(CASE WHEN Gender = N'N·ªØ' THEN 1 ELSE 0 END) as N·ªØCount,
                SUM(CASE WHEN Certificate = N'C√≥' THEN 1 ELSE 0 END) as C√≥Count,
                SUM(CASE WHEN Price > 1000000 THEN 1 ELSE 0 END) as ProductsWithVNDPrice
            FROM Products
            """
            
            df = pd.read_sql(stats_sql, self.conn)
            print("\nüìà TH·ªêNG K√ä SAU CHUY·ªÇN ƒê·ªîI:")
            print(df.to_string(index=False))
            
            # Hi·ªÉn th·ªã m·ªôt s·ªë s·∫£n ph·∫©m
            sample_sql = """
            SELECT TOP 10 Id, Name, Price, Gender, Condition, Certificate, WarrantyInfo
            FROM Products ORDER BY Id DESC
            """
            
            df_sample = pd.read_sql(sample_sql, self.conn)
            print("\nüîç M·∫™U D·ªÆ LI·ªÜU:")
            print(df_sample.to_string(index=False))
            
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói ki·ªÉm tra k·∫øt qu·∫£: {e}")
            return False
    
    def run_full_process(self, vietnamize=False):
        """Ch·∫°y to√†n b·ªô quy tr√¨nh c·∫£i thi·ªán"""
        print("üöÄ B·∫ÆT ƒê·∫¶U QUY TR√åNH C·∫¢I THI·ªÜN ƒê·ªäNH D·∫†NG DATABASE")
        print("=" * 60)
        
        # B∆∞·ªõc 1: Ki·ªÉm tra hi·ªán tr·∫°ng
        print("\n1Ô∏è‚É£ KI·ªÇM TRA HI·ªÜN TR·∫†NG")
        self.check_current_collation()
        self.check_column_collation()
        
        # B∆∞·ªõc 2: Backup
        print("\n2Ô∏è‚É£ BACKUP D·ªÆ LI·ªÜU")
        backup_table = self.backup_products_table()
        if not backup_table:
            return False
        
        # B∆∞·ªõc 3: T·∫°o b·∫£ng temp
        print("\n3Ô∏è‚É£ T·∫†O B·∫¢NG TEMP")
        if not self.create_temp_table():
            return False
        
        # B∆∞·ªõc 4: Sao ch√©p d·ªØ li·ªáu
        print("\n4Ô∏è‚É£ SAO CH√âP D·ªÆ LI·ªÜU")
        if not self.copy_data_to_temp():
            return False
        
        # B∆∞·ªõc 5: Test Unicode
        print("\n5Ô∏è‚É£ TEST UNICODE SUPPORT")
        if not self.test_unicode_support():
            return False
        
        # B∆∞·ªõc 6: Thay th·∫ø b·∫£ng
        print("\n6Ô∏è‚É£ THAY TH·∫æ B·∫¢NG")
        if not self.replace_original_table():
            return False
        
        # B∆∞·ªõc 7: Vi·ªát h√≥a (n·∫øu c·∫ßn)
        if vietnamize:
            print("\n7Ô∏è‚É£ VI·ªÜT H√ìA D·ªÆ LI·ªÜU")
            if not self.vietnamize_data():
                return False
        
        # B∆∞·ªõc 8: Ki·ªÉm tra k·∫øt qu·∫£
        print("\n8Ô∏è‚É£ KI·ªÇM TRA K·∫æT QU·∫¢")
        self.check_results()
        
        print("\n‚úÖ QUY TR√åNH HO√ÄN TH√ÄNH TH√ÄNH C√îNG!")
        return True

def main():
    """H√†m main"""
    # Connection string - thay ƒë·ªïi theo c·∫•u h√¨nh c·ªßa b·∫°n
    connection_string = (
        "DRIVER={SQL Server};"
        "SERVER=localhost;"
        "DATABASE=Shopping_Demo;"
        "Trusted_Connection=yes;"
    )
    
    # T·∫°o instance
    improver = DatabaseFormatImprover(connection_string)
    
    # K·∫øt n·ªëi
    if not improver.connect():
        return
    
    try:
        print("üîß DATABASE FORMAT IMPROVER")
        print("=" * 40)
        print("1. C·∫£i thi·ªán ƒë·ªãnh d·∫°ng (gi·ªØ ti·∫øng Anh)")
        print("2. C·∫£i thi·ªán ƒë·ªãnh d·∫°ng + Vi·ªát h√≥a")
        print("3. Ch·ªâ ki·ªÉm tra hi·ªán tr·∫°ng")
        print("4. Tho√°t")
        
        choice = input("\nCh·ªçn t√πy ch·ªçn (1-4): ").strip()
        
        if choice == "1":
            improver.run_full_process(vietnamize=False)
        elif choice == "2":
            improver.run_full_process(vietnamize=True)
        elif choice == "3":
            improver.check_current_collation()
            improver.check_column_collation()
        elif choice == "4":
            print("üëã T·∫°m bi·ªát!")
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è ƒê√£ h·ªßy b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
    finally:
        improver.disconnect()

if __name__ == "__main__":
    main()
