#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Check Table Structure
Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng Products
"""

import pyodbc

def main():
    print("üîç KI·ªÇM TRA C·∫§U TR√öC B·∫¢NG PRODUCTS")
    print("=" * 50)
    
    # Connection string
    connection_string = (
        "DRIVER={SQL Server};"
        "SERVER=localhost;"
        "DATABASE=Shopping_Demo;"
        "Trusted_Connection=yes;"
    )
    
    try:
        print("üîó ƒêang k·∫øt n·ªëi database...")
        conn = pyodbc.connect(connection_string)
        cursor = conn.cursor()
        print("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!")
        
        # Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng Products
        print("\nüìã C·∫§U TR√öC B·∫¢NG PRODUCTS:")
        print("-" * 50)
        
        cursor.execute("""
            SELECT 
                c.name as ColumnName,
                t.name as DataType,
                c.max_length as MaxLength,
                c.precision as Precision,
                c.scale as Scale,
                c.is_nullable as IsNullable,
                c.collation_name as Collation
            FROM sys.columns c
            INNER JOIN sys.types t ON c.user_type_id = t.user_type_id
            WHERE c.object_id = OBJECT_ID('Products')
            ORDER BY c.column_id
        """)
        
        columns = cursor.fetchall()
        print(f"{'T√™n c·ªôt':<20} {'Ki·ªÉu d·ªØ li·ªáu':<15} {'ƒê·ªô d√†i':<10} {'Precision':<10} {'Scale':<8} {'Null':<5} {'Collation'}")
        print("-" * 100)
        
        for col in columns:
            print(f"{col[0]:<20} {col[1]:<15} {col[2]:<10} {col[3]:<10} {col[4]:<8} {'Yes' if col[5] else 'No':<5} {col[6] or 'N/A'}")
        
        # Ki·ªÉm tra s·ªë l∆∞·ª£ng b·∫£n ghi
        cursor.execute("SELECT COUNT(*) FROM Products")
        count = cursor.fetchone()[0]
        print(f"\nüìä T·ªïng s·ªë b·∫£n ghi: {count}")
        
        # Ki·ªÉm tra d·ªØ li·ªáu m·∫´u
        print("\nüîç D·ªÆ LI·ªÜU M·∫™U:")
        print("-" * 50)
        
        cursor.execute("SELECT TOP 3 * FROM Products")
        sample_data = cursor.fetchall()
        
        # L·∫•y t√™n c·ªôt
        column_names = [column[0] for column in cursor.description]
        print("C√°c c·ªôt:", ", ".join(column_names))
        print()
        
        for i, row in enumerate(sample_data, 1):
            print(f"B·∫£n ghi {i}:")
            for j, value in enumerate(row):
                print(f"  {column_names[j]}: {value}")
            print()
        
        cursor.close()
        conn.close()
        
    except Exception as e:
        print(f"‚ùå L·ªñI: {e}")

if __name__ == "__main__":
    main()
