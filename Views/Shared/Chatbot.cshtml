<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chatbot AI - Aurum Watches</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .chatbot-container {
            width: 400px;
            height: 600px;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .chatbot-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            text-align: center;
        }

        .chatbot-header h2 {
            font-size: 18px;
            font-weight: 600;
        }

        .chatbot-header .status {
            font-size: 12px;
            opacity: 0.8;
            margin-top: 5px;
        }

        .chatbot-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            background: #f8f9fa;
        }

        .message {
            margin-bottom: 15px;
            display: flex;
            align-items: flex-start;
        }

        .message.user {
            justify-content: flex-end;
        }

        .message.bot {
            justify-content: flex-start;
        }

        .message-content {
            max-width: 80%;
            padding: 12px 16px;
            border-radius: 18px;
            font-size: 14px;
            line-height: 1.4;
            word-wrap: break-word;
        }

        .message.user .message-content {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-bottom-right-radius: 4px;
        }

        .message.bot .message-content {
            background: white;
            color: #333;
            border: 1px solid #e9ecef;
            border-bottom-left-radius: 4px;
        }

        .quick-replies {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 10px;
        }

        .quick-reply {
            background: #e9ecef;
            color: #495057;
            padding: 6px 12px;
            border-radius: 15px;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.2s;
            border: none;
        }

        .quick-reply:hover {
            background: #667eea;
            color: white;
        }

        .chatbot-input {
            padding: 20px;
            background: white;
            border-top: 1px solid #e9ecef;
            display: flex;
            gap: 10px;
        }

        .chatbot-input input {
            flex: 1;
            padding: 12px 16px;
            border: 1px solid #e9ecef;
            border-radius: 25px;
            font-size: 14px;
            outline: none;
        }

        .chatbot-input input:focus {
            border-color: #667eea;
        }

        .chatbot-input button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 50%;
            width: 45px;
            height: 45px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .chatbot-input button:hover {
            transform: scale(1.05);
        }

        .chatbot-input button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .typing-indicator {
            display: none;
            padding: 12px 16px;
            background: white;
            border: 1px solid #e9ecef;
            border-radius: 18px;
            border-bottom-left-radius: 4px;
            margin-bottom: 15px;
            max-width: 80px;
        }

        .typing-indicator.show {
            display: block;
        }

        .typing-dots {
            display: flex;
            gap: 4px;
        }

        .typing-dot {
            width: 8px;
            height: 8px;
            background: #6c757d;
            border-radius: 50%;
            animation: typing 1.4s infinite;
        }

        .typing-dot:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-dot:nth-child(3) {
            animation-delay: 0.4s;
        }

        .welcome-message {
            text-align: center;
            color: #6c757d;
            font-size: 14px;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class="chatbot-container">
        <div class="chatbot-header">
            <h2>ü§ñ Tr·ª£ l√Ω AI</h2>
            <div class="status" id="status">ƒêang k·∫øt n·ªëi...</div>
        </div>
        
        <div class="chatbot-messages" id="messages">
            <div class="welcome-message">
                Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa Aurum Watches. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√°c s·∫£n ph·∫©m ƒë·ªìng h·ªì c·ªßa ch√∫ng t√¥i.<br>
                <small style="color: #999;">L∆∞u √Ω: Ph·∫£n h·ªìi c√≥ th·ªÉ m·∫•t 1-2 ph√∫t ƒë·ªÉ x·ª≠ l√Ω.</small>
            </div>
        </div>
        
        <div class="typing-indicator" id="typingIndicator">
            <div class="typing-dots">
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
            </div>
        </div>
        
        <div class="chatbot-input">
            <input type="text" id="messageInput" placeholder="Nh·∫≠p tin nh·∫Øn..." maxlength="500">
            <button id="sendButton" onclick="sendMessage()">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/>
                </svg>
            </button>
        </div>
    </div>

    <script>
        let sessionId = generateSessionId();
        let isTyping = false;

        function generateSessionId() {
            return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        }

        function updateStatus(status, isOnline = true) {
            const statusElement = document.getElementById('status');
            statusElement.textContent = status;
            statusElement.style.color = isOnline ? 'rgba(255,255,255,0.8)' : '#ff6b6b';
        }

        function addMessage(content, isUser = false, quickReplies = []) {
            const messagesContainer = document.getElementById('messages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isUser ? 'user' : 'bot'}`;
            
            const messageContent = document.createElement('div');
            messageContent.className = 'message-content';
            messageContent.innerHTML = content;
            
            messageDiv.appendChild(messageContent);
            
            if (quickReplies.length > 0) {
                const quickRepliesDiv = document.createElement('div');
                quickRepliesDiv.className = 'quick-replies';
                
                quickReplies.forEach(reply => {
                    const button = document.createElement('button');
                    button.className = 'quick-reply';
                    button.textContent = reply;
                    button.onclick = () => sendQuickReply(reply);
                    quickRepliesDiv.appendChild(button);
                });
                
                messageDiv.appendChild(quickRepliesDiv);
            }
            
            messagesContainer.appendChild(messageDiv);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        function showTyping() {
            const typingIndicator = document.getElementById('typingIndicator');
            typingIndicator.classList.add('show');
            isTyping = true;
        }

        function hideTyping() {
            const typingIndicator = document.getElementById('typingIndicator');
            typingIndicator.classList.remove('show');
            isTyping = false;
        }

        function sendQuickReply(reply) {
            const messageInput = document.getElementById('messageInput');
            messageInput.value = reply;
            sendMessage();
        }

        async function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const sendButton = document.getElementById('sendButton');
            const message = messageInput.value.trim();
            
            if (!message || isTyping) return;
            
            addMessage(message, true);
            messageInput.value = '';
            
            messageInput.disabled = true;
            sendButton.disabled = true;
            
            showTyping();
            updateStatus('ƒêang tr·∫£ l·ªùi... (c√≥ th·ªÉ m·∫•t 1-2 ph√∫t)');
            
            try {
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 120000); // 2 ph√∫t timeout
                
                const response = await fetch('/api/chat/send', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        message: message,
                        sessionId: sessionId
                    }),
                    signal: controller.signal
                });
                
                clearTimeout(timeoutId);
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                
                hideTyping();
                addMessage(data.message, false, data.quickReplies || []);
                updateStatus('Tr·ª±c tuy·∫øn');
                
            } catch (error) {
                console.error('Error:', error);
                hideTyping();
                addMessage('Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau.', false);
                updateStatus('L·ªói k·∫øt n·ªëi', false);
            } finally {
                messageInput.disabled = false;
                sendButton.disabled = false;
                messageInput.focus();
            }
        }

        document.getElementById('messageInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        document.getElementById('messageInput').focus();

        async function checkHealth() {
            try {
                const response = await fetch('/api/chat/health');
                if (response.ok) {
                    updateStatus('Tr·ª±c tuy·∫øn');
                } else {
                    updateStatus('L·ªói k·∫øt n·ªëi', false);
                }
            } catch (error) {
                updateStatus('L·ªói k·∫øt n·ªëi', false);
            }
        }

        checkHealth();
        setInterval(checkHealth, 30000);
    </script>
</body>
</html>