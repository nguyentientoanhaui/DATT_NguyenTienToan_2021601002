#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Simple Database Format Improver
Script ƒë∆°n gi·∫£n ƒë·ªÉ c·∫£i thi·ªán ƒë·ªãnh d·∫°ng database
"""

import pyodbc
from datetime import datetime

def main():
    print("üöÄ SIMPLE DATABASE FORMAT IMPROVER")
    print("=" * 50)
    
    # Connection string
    connection_string = (
        "DRIVER={SQL Server};"
        "SERVER=localhost;"
        "DATABASE=Shopping_Demo;"
        "Trusted_Connection=yes;"
    )
    
    try:
        print("üîó ƒêang k·∫øt n·ªëi database...")
        conn = pyodbc.connect(connection_string)
        cursor = conn.cursor()
        print("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!")
        
        # B∆∞·ªõc 1: Ki·ªÉm tra hi·ªán tr·∫°ng
        print("\n1Ô∏è‚É£ KI·ªÇM TRA HI·ªÜN TR·∫†NG")
        print("-" * 30)
        
        # Ki·ªÉm tra collation database
        cursor.execute("SELECT name, collation_name FROM sys.databases WHERE name = 'Shopping_Demo'")
        db_info = cursor.fetchone()
        print(f"Database: {db_info[0]}")
        print(f"Collation hi·ªán t·∫°i: {db_info[1]}")
        
        # Ki·ªÉm tra collation c√°c c·ªôt
        cursor.execute("""
            SELECT 
                c.name as ColumnName,
                c.collation_name as CurrentCollation,
                t.name as DataType
            FROM sys.columns c
            INNER JOIN sys.types t ON c.user_type_id = t.user_type_id
            WHERE c.object_id = OBJECT_ID('Products')
            AND c.name IN ('Condition', 'Gender', 'Certificate', 'WarrantyInfo')
            ORDER BY c.name
        """)
        
        columns = cursor.fetchall()
        print("\nCollation c√°c c·ªôt:")
        for col in columns:
            print(f"  {col[0]}: {col[2]} (Collation: {col[1]})")
        
        # Ki·ªÉm tra d·ªØ li·ªáu m·∫´u
        cursor.execute("SELECT TOP 3 Id, Name, Condition, Gender FROM Products")
        sample_data = cursor.fetchall()
        print("\nD·ªØ li·ªáu m·∫´u:")
        for row in sample_data:
            print(f"  ID {row[0]}: {row[1]} | Condition: {row[2]} | Gender: {row[3]}")
        
        # B∆∞·ªõc 2: Backup
        print("\n2Ô∏è‚É£ BACKUP D·ªÆ LI·ªÜU")
        print("-" * 30)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_table = f"Products_Backup_{timestamp}"
        
        backup_sql = f"SELECT * INTO {backup_table} FROM Products"
        cursor.execute(backup_sql)
        conn.commit()
        print(f"‚úÖ ƒê√£ backup th√†nh {backup_table}")
        
        # B∆∞·ªõc 3: T·∫°o b·∫£ng temp
        print("\n3Ô∏è‚É£ T·∫†O B·∫¢NG TEMP")
        print("-" * 30)
        
        # X√≥a b·∫£ng temp n·∫øu t·ªìn t·∫°i
        try:
            cursor.execute("DROP TABLE Products_Temp")
            conn.commit()
            print("üóëÔ∏è ƒê√£ x√≥a b·∫£ng temp c≈©")
        except:
            pass
        
        create_table_sql = """
        CREATE TABLE Products_Temp (
            Id INT IDENTITY(1,1) PRIMARY KEY,
            Name NVARCHAR(500) COLLATE Vietnamese_CI_AS,
            Price DECIMAL(18,2),
            CapitalPrice DECIMAL(18,2),
            CreditCardPrice DECIMAL(18,2),
            Gender NVARCHAR(50) COLLATE Vietnamese_CI_AS,
            Condition NVARCHAR(200) COLLATE Vietnamese_CI_AS,
            Certificate NVARCHAR(100) COLLATE Vietnamese_CI_AS,
            WarrantyInfo NVARCHAR(200) COLLATE Vietnamese_CI_AS,
            Description NVARCHAR(MAX) COLLATE Vietnamese_CI_AS,
            Image NVARCHAR(500),
            BrandId INT,
            CategoryId INT,
            CreatedAt DATETIME2 DEFAULT GETDATE(),
            UpdatedAt DATETIME2 DEFAULT GETDATE()
        )
        """
        
        cursor.execute(create_table_sql)
        conn.commit()
        print("‚úÖ ƒê√£ t·∫°o b·∫£ng Products_Temp v·ªõi Unicode support")
        
        # B∆∞·ªõc 4: Sao ch√©p d·ªØ li·ªáu
        print("\n4Ô∏è‚É£ SAO CH√âP D·ªÆ LI·ªÜU")
        print("-" * 30)
        
        copy_sql = """
        INSERT INTO Products_Temp (Name, Price, CapitalPrice, CreditCardPrice, Gender, Condition, Certificate, WarrantyInfo, Description, Image, BrandId, CategoryId)
        SELECT Name, Price, CapitalPrice, CreditCardPrice, Gender, Condition, Certificate, WarrantyInfo, Description, Image, BrandId, CategoryId
        FROM Products
        """
        
        cursor.execute(copy_sql)
        conn.commit()
        
        # Ki·ªÉm tra s·ªë l∆∞·ª£ng
        cursor.execute("SELECT COUNT(*) FROM Products")
        original_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM Products_Temp")
        temp_count = cursor.fetchone()[0]
        
        print(f"‚úÖ ƒê√£ sao ch√©p {temp_count}/{original_count} b·∫£n ghi")
        
        # B∆∞·ªõc 5: Test Unicode
        print("\n5Ô∏è‚É£ TEST UNICODE SUPPORT")
        print("-" * 30)
        
        test_data = [
            ("ƒê·ªìng h·ªì Rolex Submariner", "Nam", "Xu·∫•t s·∫Øc", "C√≥", "5 NƒÉm"),
            ("ƒê·ªìng h·ªì Omega Speedmaster", "Nam", "R·∫•t t·ªët", "Kh√¥ng", "3 NƒÉm"),
            ("ƒê·ªìng h·ªì Cartier Tank", "N·ªØ", "T·ªët", "C√≥", "2 NƒÉm")
        ]
        
        insert_sql = """
        INSERT INTO Products_Temp (Name, Gender, Condition, Certificate, WarrantyInfo)
        VALUES (?, ?, ?, ?, ?)
        """
        
        for data in test_data:
            cursor.execute(insert_sql, data)
        
        conn.commit()
        print("‚úÖ ƒê√£ th√™m d·ªØ li·ªáu test Unicode")
        
        # Ki·ªÉm tra d·ªØ li·ªáu test
        cursor.execute("SELECT Name, Gender, Condition, Certificate, WarrantyInfo FROM Products_Temp WHERE Name LIKE '%ƒê·ªìng h·ªì%'")
        test_results = cursor.fetchall()
        print("\nD·ªØ li·ªáu test Unicode:")
        for row in test_results:
            print(f"  {row[0]} | {row[1]} | {row[2]} | {row[3]} | {row[4]}")
        
        # B∆∞·ªõc 6: Thay th·∫ø b·∫£ng
        print("\n6Ô∏è‚É£ THAY TH·∫æ B·∫¢NG")
        print("-" * 30)
        
        # X√≥a b·∫£ng g·ªëc
        cursor.execute("DROP TABLE Products")
        print("üóëÔ∏è ƒê√£ x√≥a b·∫£ng Products g·ªëc")
        
        # ƒê·ªïi t√™n b·∫£ng temp
        cursor.execute("EXEC sp_rename 'Products_Temp', 'Products'")
        print("üîÑ ƒê√£ ƒë·ªïi t√™n Products_Temp th√†nh Products")
        
        # T·∫°o l·∫°i index
        indexes = [
            "CREATE INDEX IX_Products_Condition ON Products(Condition)",
            "CREATE INDEX IX_Products_Gender ON Products(Gender)",
            "CREATE INDEX IX_Products_Certificate ON Products(Certificate)",
            "CREATE INDEX IX_Products_BrandId ON Products(BrandId)",
            "CREATE INDEX IX_Products_CategoryId ON Products(CategoryId)",
            "CREATE INDEX IX_Products_Price ON Products(Price)"
        ]
        
        for index_sql in indexes:
            cursor.execute(index_sql)
        
        conn.commit()
        print("‚úÖ ƒê√£ t·∫°o l·∫°i c√°c index")
        
        # B∆∞·ªõc 7: Ki·ªÉm tra k·∫øt qu·∫£
        print("\n7Ô∏è‚É£ KI·ªÇM TRA K·∫æT QU·∫¢")
        print("-" * 30)
        
        # Ki·ªÉm tra collation m·ªõi
        cursor.execute("""
            SELECT 
                c.name as ColumnName,
                c.collation_name as NewCollation,
                t.name as DataType
            FROM sys.columns c
            INNER JOIN sys.types t ON c.user_type_id = t.user_type_id
            WHERE c.object_id = OBJECT_ID('Products')
            AND c.name IN ('Condition', 'Gender', 'Certificate', 'WarrantyInfo')
            ORDER BY c.name
        """)
        
        new_columns = cursor.fetchall()
        print("Collation m·ªõi:")
        for col in new_columns:
            print(f"  {col[0]}: {col[2]} (Collation: {col[1]})")
        
        # Ki·ªÉm tra d·ªØ li·ªáu Unicode
        cursor.execute("SELECT Name, Gender, Condition, Certificate, WarrantyInfo FROM Products WHERE Name LIKE '%ƒê·ªìng h·ªì%'")
        unicode_results = cursor.fetchall()
        print("\nD·ªØ li·ªáu Unicode:")
        for row in unicode_results:
            print(f"  {row[0]} | {row[1]} | {row[2]} | {row[3]} | {row[4]}")
        
        # Th·ªëng k√™
        cursor.execute("SELECT COUNT(*) FROM Products")
        total_count = cursor.fetchone()[0]
        print(f"\nüìä T·ªïng s·ªë s·∫£n ph·∫©m: {total_count}")
        
        cursor.close()
        conn.close()
        
        print("\nüéâ HO√ÄN TH√ÄNH TH√ÄNH C√îNG!")
        print("‚úÖ Database ƒë√£ ƒë∆∞·ª£c c·∫£i thi·ªán v·ªõi Unicode support")
        print("‚úÖ Backup ƒë∆∞·ª£c t·∫°o an to√†n")
        print("‚úÖ Ti·∫øng Vi·ªát s·∫Ω hi·ªÉn th·ªã ƒë√∫ng")
        
    except Exception as e:
        print(f"‚ùå L·ªñI: {e}")
        print("üí° H√£y ki·ªÉm tra l·∫°i k·∫øt n·ªëi v√† quy·ªÅn truy c·∫≠p")

if __name__ == "__main__":
    main()
