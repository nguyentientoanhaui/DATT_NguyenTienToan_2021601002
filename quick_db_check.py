import pyodbc
import pandas as pd

def main():
    print("üîç QUICK DATABASE CHECK - SHOPPING_DEMO")
    print("=" * 60)
    
    # Connection string
    connection_string = (
        "Driver={ODBC Driver 17 for SQL Server};"
        "Server=localhost;"
        "Database=Shopping_Demo;"
        "Trusted_Connection=yes;"
    )
    
    try:
        # K·∫øt n·ªëi database
        print("üì° ƒêang k·∫øt n·ªëi ƒë·∫øn database...")
        connection = pyodbc.connect(connection_string)
        print("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!")
        
        # L·∫•y danh s√°ch b·∫£ng
        print("\nüìã DANH S√ÅCH C√ÅC B·∫¢NG:")
        print("-" * 50)
        tables_query = """
        SELECT TABLE_NAME, TABLE_SCHEMA
        FROM INFORMATION_SCHEMA.TABLES 
        WHERE TABLE_TYPE = 'BASE TABLE'
        ORDER BY TABLE_NAME
        """
        tables_df = pd.read_sql(tables_query, connection)
        print(f"T·ªïng s·ªë b·∫£ng: {len(tables_df)}")
        for i, row in tables_df.iterrows():
            print(f"  {i+1}. {row['TABLE_NAME']} (Schema: {row['TABLE_SCHEMA']})")
        
        # Ki·ªÉm tra b·∫£ng Products
        print("\nüõçÔ∏è KI·ªÇM TRA B·∫¢NG PRODUCTS:")
        print("-" * 50)
        products_query = "SELECT TOP 5 Id, Name, Price, BrandId, CategoryId, Quantity, Sold FROM Products"
        products_df = pd.read_sql(products_query, connection)
        print(f"S·ªë s·∫£n ph·∫©m (top 5): {len(products_df)}")
        for _, row in products_df.iterrows():
            print(f"  ID: {row['Id']}, Name: {row['Name'][:50]}..., Price: {row['Price']}")
        
        # Ki·ªÉm tra b·∫£ng Brands
        print("\nüè∑Ô∏è KI·ªÇM TRA B·∫¢NG BRANDS:")
        print("-" * 50)
        brands_query = "SELECT Id, Name FROM Brands"
        brands_df = pd.read_sql(brands_query, connection)
        print(f"S·ªë th∆∞∆°ng hi·ªáu: {len(brands_df)}")
        for _, row in brands_df.iterrows():
            print(f"  {row['Id']}: {row['Name']}")
        
        # Ki·ªÉm tra b·∫£ng Categories
        print("\nüìÇ KI·ªÇM TRA B·∫¢NG CATEGORIES:")
        print("-" * 50)
        categories_query = "SELECT Id, Name FROM Categories"
        categories_df = pd.read_sql(categories_query, connection)
        print(f"S·ªë danh m·ª•c: {len(categories_df)}")
        for _, row in categories_df.iterrows():
            print(f"  {row['Id']}: {row['Name']}")
        
        # Ki·ªÉm tra b·∫£ng Users
        print("\nüë• KI·ªÇM TRA B·∫¢NG USERS:")
        print("-" * 50)
        users_query = "SELECT TOP 5 Id, UserName, Email FROM AspNetUsers"
        users_df = pd.read_sql(users_query, connection)
        print(f"S·ªë ng∆∞·ªùi d√πng (top 5): {len(users_df)}")
        for _, row in users_df.iterrows():
            print(f"  {row['Id']}: {row['UserName']} ({row['Email']})")
        
        # Ki·ªÉm tra b·∫£ng Orders
        print("\nüì¶ KI·ªÇM TRA B·∫¢NG ORDERS:")
        print("-" * 50)
        orders_query = "SELECT TOP 5 Id, UserId, OrderDate, TotalAmount, Status FROM Orders"
        orders_df = pd.read_sql(orders_query, connection)
        print(f"S·ªë ƒë∆°n h√†ng (top 5): {len(orders_df)}")
        for _, row in orders_df.iterrows():
            print(f"  {row['Id']}: {row['OrderDate']} - ${row['TotalAmount']} - {row['Status']}")
        
        connection.close()
        print("\n‚úÖ Ho√†n th√†nh ki·ªÉm tra database!")
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
