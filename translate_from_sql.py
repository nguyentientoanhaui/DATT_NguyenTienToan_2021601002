import pyodbc
import re
import os

class SQLTranslator:
    def __init__(self, connection_string, sql_file_path):
        self.connection_string = connection_string
        self.sql_file_path = sql_file_path
        self.conn = None
        
    def connect(self):
        try:
            self.conn = pyodbc.connect(self.connection_string)
            print("‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!")
            return True
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
            return False
    
    def close(self):
        if self.conn:
            self.conn.close()
            print("üîí ƒê√£ ƒë√≥ng k·∫øt n·ªëi database")
    
    def read_sql_file(self):
        try:
            print(f"\nüìñ ƒê·ªåC FILE: {self.sql_file_path}")
            print("=" * 50)
            
            if not os.path.exists(self.sql_file_path):
                print(f"‚ùå File kh√¥ng t·ªìn t·∫°i: {self.sql_file_path}")
                return None
            
            with open(self.sql_file_path, 'r', encoding='utf-8', errors='ignore') as file:
                content = file.read()
            
            print(f"‚úÖ ƒê√£ ƒë·ªçc file! K√≠ch th∆∞·ªõc: {len(content)} k√Ω t·ª±")
            
            # Parse INSERT statements
            insert_pattern = r"INSERT\s+INTO\s+\[?Products\]?\s*\([^)]+\)\s*VALUES\s*\(([^)]+)\)"
            matches = re.findall(insert_pattern, content, re.IGNORECASE | re.DOTALL)
            
            products = []
            for i, match in enumerate(matches):
                try:
                    values = self.parse_values(match)
                    if values:
                        products.append(values)
                        if i < 3:
                            print(f"  S·∫£n ph·∫©m {i+1}: {values.get('Name', 'N/A')}")
                except Exception as e:
                    print(f"  ‚ö†Ô∏è L·ªói parse s·∫£n ph·∫©m {i+1}: {e}")
                    continue
            
            print(f"‚úÖ ƒê√£ parse ƒë∆∞·ª£c {len(products)} s·∫£n ph·∫©m")
            return products
            
        except Exception as e:
            print(f"‚ùå L·ªói ƒë·ªçc file: {e}")
            return None
    
    def parse_values(self, values_string):
        try:
            values = []
            current_value = ""
            in_quotes = False
            quote_char = None
            
            for char in values_string:
                if char in ["'", '"'] and (not in_quotes or char == quote_char):
                    if not in_quotes:
                        in_quotes = True
                        quote_char = char
                    else:
                        in_quotes = False
                        quote_char = None
                elif char == ',' and not in_quotes:
                    values.append(current_value.strip())
                    current_value = ""
                else:
                    current_value += char
            
            if current_value.strip():
                values.append(current_value.strip())
            
            product = {
                'Id': self.clean_value(values[0]) if len(values) > 0 else None,
                'Name': self.clean_value(values[1]) if len(values) > 1 else None,
                'Model': self.clean_value(values[2]) if len(values) > 2 else None,
                'BrandId': self.clean_value(values[3]) if len(values) > 3 else None,
                'CategoryId': self.clean_value(values[4]) if len(values) > 4 else None,
                'Condition': self.clean_value(values[5]) if len(values) > 5 else None,
                'Gender': self.clean_value(values[6]) if len(values) > 6 else None,
                'Price': self.clean_value(values[7]) if len(values) > 7 else None,
                'CapitalPrice': self.clean_value(values[8]) if len(values) > 8 else None,
                'CreditCardPrice': self.clean_value(values[9]) if len(values) > 9 else None,
                'Description': self.clean_value(values[10]) if len(values) > 10 else None,
                'Certificate': self.clean_value(values[11]) if len(values) > 11 else None,
                'WarrantyInfo': self.clean_value(values[12]) if len(values) > 12 else None,
                'ImageUrl': self.clean_value(values[13]) if len(values) > 13 else None,
                'CreatedAt': self.clean_value(values[14]) if len(values) > 14 else None,
                'UpdatedAt': self.clean_value(values[15]) if len(values) > 15 else None
            }
            
            return product
            
        except Exception as e:
            print(f"‚ùå L·ªói parse values: {e}")
            return None
    
    def clean_value(self, value):
        if not value or value == 'NULL':
            return None
        
        value = value.strip()
        if (value.startswith("'") and value.endswith("'")) or \
           (value.startswith('"') and value.endswith('"')):
            value = value[1:-1]
        
        value = value.replace("''", "'")
        value = value.replace('""', '"')
        
        return value
    
    def translate_text(self, text):
        if not text or len(text.strip()) < 3:
            return text
        
        # S·ª≠a l·ªói encoding
        text = self.fix_encoding(text)
        
        # Mapping d·ªãch thu·∫≠t
        translation_map = {
            'Excellent': 'Xu·∫•t s·∫Øc',
            'Very Good': 'R·∫•t t·ªët',
            'Good': 'T·ªët',
            'Fair': 'Kh√°',
            'Poor': 'K√©m',
            'New': 'M·ªõi',
            'Vintage': 'C·ªï ƒëi·ªÉn',
            'Pre-owned': 'ƒê√£ qua s·ª≠ d·ª•ng',
            'Unworn': 'Ch∆∞a ƒëeo',
            'Men': 'Nam',
            'Women': 'N·ªØ',
            'Unisex': 'Unisex',
            'Male': 'Nam',
            'Female': 'N·ªØ',
            'Original Box': 'H·ªôp g·ªëc',
            'Original Papers': 'Gi·∫•y t·ªù g·ªëc',
            'Warranty Card': 'Th·∫ª b·∫£o h√†nh',
            'Service Book': 'S·ªï b·∫£o h√†nh',
            'No Papers': 'Kh√¥ng c√≥ gi·∫•y t·ªù',
            'Box and Papers': 'H·ªôp v√† gi·∫•y t·ªù',
            'Box Only': 'Ch·ªâ c√≥ h·ªôp',
            'Papers Only': 'Ch·ªâ c√≥ gi·∫•y t·ªù',
            'Yes': 'C√≥',
            'No': 'Kh√¥ng',
            '1 Year': '1 nƒÉm',
            '2 Years': '2 nƒÉm',
            '3 Years': '3 nƒÉm',
            '5 Years': '5 nƒÉm',
            'Lifetime': 'Tr·ªçn ƒë·ªùi',
            'No Warranty': 'Kh√¥ng b·∫£o h√†nh',
            'International Warranty': 'B·∫£o h√†nh qu·ªëc t·∫ø',
            'Manufacturer Warranty': 'B·∫£o h√†nh nh√† s·∫£n xu·∫•t',
            'stainless steel': 'th√©p kh√¥ng g·ªâ',
            'automatic movement': 'b·ªô m√°y t·ª± ƒë·ªông',
            'mechanical movement': 'b·ªô m√°y c∆°',
            'quartz movement': 'b·ªô m√°y quartz',
            'manual winding': 'l√™n d√¢y tay',
            'self-winding': 't·ª± ƒë·ªông l√™n d√¢y',
            'perpetual calendar': 'l·ªãch v·∫°n ni√™n',
            'annual calendar': 'l·ªãch nƒÉm',
            'moon phase': 'pha m·∫∑t trƒÉng',
            'chronograph': 'chronograph',
            'tachymeter': 'thang ƒëo t·ªëc ƒë·ªô',
            'telemeter': 'thang ƒëo kho·∫£ng c√°ch',
            'slide rule': 'th∆∞·ªõc tr∆∞·ª£t',
            'bezel': 'v√†nh bezel',
            'crown': 'n√∫m v·∫∑n',
            'pushers': 'n√∫t b·∫•m',
            'case': 'v·ªè m√°y',
            'dial': 'm·∫∑t s·ªë',
            'hands': 'kim',
            'markers': 'v·∫°ch s·ªë',
            'indexes': 'v·∫°ch s·ªë',
            'sub-dials': 'm·∫∑t s·ªë ph·ª•',
            'complications': 'ch·ª©c nƒÉng ph·ª©c t·∫°p',
            'movement': 'b·ªô m√°y',
            'caliber': 'caliber',
            'jewels': 'ch√¢n k√≠nh',
            'frequency': 't·∫ßn s·ªë',
            'accuracy': 'ƒë·ªô ch√≠nh x√°c',
            'precision': 'ƒë·ªô ch√≠nh x√°c',
            'reliability': 'ƒë·ªô tin c·∫≠y',
            'durability': 'ƒë·ªô b·ªÅn',
            'craftsmanship': 'tay ngh·ªÅ th·ªß c√¥ng',
            'heritage': 'di s·∫£n',
            'tradition': 'truy·ªÅn th·ªëng',
            'innovation': 's·ª± ƒë·ªïi m·ªõi',
            'excellence': 's·ª± xu·∫•t s·∫Øc',
            'quality': 'ch·∫•t l∆∞·ª£ng',
            'prestige': 'uy t√≠n',
            'status': 'ƒë·ªãa v·ªã',
            'luxury': 'xa x·ªâ',
            'premium': 'cao c·∫•p',
            'exclusive': 'ƒë·ªôc quy·ªÅn',
            'limited edition': 'phi√™n b·∫£n gi·ªõi h·∫°n',
            'special edition': 'phi√™n b·∫£n ƒë·∫∑c bi·ªát',
            'collector\'s item': 'm√≥n ƒë·ªì s∆∞u t·∫ßm',
            'investment piece': 'm√≥n ƒë·∫ßu t∆∞',
            'heirloom': 'di s·∫£n gia ƒë√¨nh',
            'legacy': 'di s·∫£n',
            'iconic': 'bi·ªÉu t∆∞·ª£ng',
            'legendary': 'huy·ªÅn tho·∫°i',
            'famous': 'n·ªïi ti·∫øng',
            'popular': 'ph·ªï bi·∫øn',
            'trendy': 'th·ªãnh h√†nh',
            'fashionable': 'th·ªùi trang',
            'stylish': 'phong c√°ch',
            'elegant': 'thanh l·ªãch',
            'sophisticated': 'tinh t·∫ø',
            'refined': 'tinh t·∫ø',
            'classic': 'c·ªï ƒëi·ªÉn',
            'timeless': 'v∆∞·ª£t th·ªùi gian',
            'modern': 'hi·ªán ƒë·∫°i',
            'contemporary': 'ƒë∆∞∆°ng ƒë·∫°i',
            'traditional': 'truy·ªÅn th·ªëng',
            'vintage': 'c·ªï ƒëi·ªÉn',
            'retro': 'ho√†i c·ªï',
            'new': 'm·ªõi',
            'pre-owned': 'ƒë√£ qua s·ª≠ d·ª•ng',
            'used': 'ƒë√£ s·ª≠ d·ª•ng',
            'unworn': 'ch∆∞a ƒëeo',
            'mint condition': 't√¨nh tr·∫°ng ho√†n h·∫£o',
            'excellent condition': 't√¨nh tr·∫°ng xu·∫•t s·∫Øc',
            'very good condition': 't√¨nh tr·∫°ng r·∫•t t·ªët',
            'good condition': 't√¨nh tr·∫°ng t·ªët',
            'fair condition': 't√¨nh tr·∫°ng kh√°',
            'poor condition': 't√¨nh tr·∫°ng k√©m',
            'gateway to': 'l·ªëi v√†o',
            'ownership': 's·ªü h·ªØu',
            'cased in': 'ƒë∆∞·ª£c b·ªçc trong',
            'affordable': 'gi√° c·∫£ ph·∫£i chƒÉng',
            'instantly recognizable': 'c√≥ th·ªÉ nh·∫≠n ra ngay l·∫≠p t·ª©c',
            'coveted': 'ƒë∆∞·ª£c ∆∞a chu·ªông',
            'dress watch': 'ƒë·ªìng h·ªì c√¥ng s·ªü',
            '5-point': '5 ƒëi·ªÉm',
            'coronet': 'v∆∞∆°ng mi·ªán',
            '12-hour marker': 'v·ªã tr√≠ 12 gi·ªù',
            'date display': 'hi·ªÉn th·ªã ng√†y',
            'Cyclops magnifier': 'k√≠nh l√∫p Cyclops',
            'three-link': 'ba m·∫Øt',
            'Oyster bracelet': 'd√¢y ƒëeo Oyster',
            'recognition': 's·ª± c√¥ng nh·∫≠n',
            'entry-level price': 'gi√° ƒë·∫ßu v√†o',
            'for sale': 'ƒë∆∞·ª£c b√°n',
            'black dial': 'm·∫∑t ƒëen',
            'displaying the time': 'hi·ªÉn th·ªã th·ªùi gian',
            'via': 'qua',
            'silvered': 'b·∫°c',
            'hour markers': 'v·∫°ch gi·ªù',
            'set against': 'ƒë·∫∑t tr√™n',
            'sharp': 's·∫Øc n√©t',
            'o\'clock': 'gi·ªù',
            'entry-level': 'ƒë·∫ßu v√†o',
            'level': 'c·∫•p ƒë·ªô',
            'price': 'gi√°',
            'cost': 'chi ph√≠',
            'value': 'gi√° tr·ªã',
            'worth': 'ƒë√°ng gi√°',
            'expensive': 'ƒë·∫Øt ti·ªÅn',
            'cheap': 'r·∫ª',
            'budget': 'ng√¢n s√°ch',
            'reasonable': 'h·ª£p l√Ω',
            'fair': 'c√¥ng b·∫±ng',
            'outstanding': 'n·ªïi b·∫≠t',
            'superior': '∆∞u vi·ªát',
            'inferior': 'k√©m',
            'bad': 'x·∫•u',
            'terrible': 'kh·ªßng khi·∫øp',
            'awful': 'kinh kh·ªßng',
            'horrible': 'kinh kh·ªßng',
            'dreadful': 'kinh kh·ªßng',
            'frightful': 'kinh kh·ªßng',
            'shocking': 's·ªëc',
            'amazing': 'tuy·ªát v·ªùi',
            'wonderful': 'tuy·ªát v·ªùi',
            'fantastic': 'tuy·ªát v·ªùi',
            'brilliant': 'tuy·ªát v·ªùi',
            'magnificent': 'tr√°ng l·ªá',
            'gorgeous': 'tuy·ªát ƒë·∫πp',
            'beautiful': 'ƒë·∫πp',
            'pretty': 'ƒë·∫πp',
            'handsome': 'ƒë·∫πp trai',
            'attractive': 'h·∫•p d·∫´n',
            'appealing': 'h·∫•p d·∫´n',
            'charming': 'quy·∫øn r≈©',
            'enchanting': 'm√™ ho·∫∑c',
            'captivating': 'm√™ ho·∫∑c',
            'fascinating': 'h·∫•p d·∫´n',
            'interesting': 'th√∫ v·ªã',
            'exciting': 'th√∫ v·ªã',
            'thrilling': 'th√∫ v·ªã',
            'adventurous': 'phi√™u l∆∞u',
            'daring': 'd≈©ng c·∫£m',
            'bold': 'd≈©ng c·∫£m',
            'brave': 'd≈©ng c·∫£m',
            'courageous': 'd≈©ng c·∫£m',
            'fearless': 'kh√¥ng s·ª£ h√£i',
            'intrepid': 'd≈©ng c·∫£m',
            'valiant': 'd≈©ng c·∫£m',
            'heroic': 'anh h√πng',
            'noble': 'cao qu√Ω',
            'honorable': 'ƒë√°ng k√≠nh',
            'respectable': 'ƒë√°ng k√≠nh',
            'admirable': 'ƒë√°ng ng∆∞·ª°ng m·ªô',
            'commendable': 'ƒë√°ng khen',
            'praiseworthy': 'ƒë√°ng khen',
            'laudable': 'ƒë√°ng khen',
            'meritorious': 'c√≥ c√¥ng',
            'deserving': 'x·ª©ng ƒë√°ng',
            'worthy': 'x·ª©ng ƒë√°ng',
            'valuable': 'c√≥ gi√° tr·ªã',
            'precious': 'qu√Ω gi√°',
            'treasured': 'qu√Ω gi√°',
            'cherished': 'qu√Ω gi√°',
            'beloved': 'y√™u qu√Ω',
            'dear': 'th√¢n y√™u',
            'darling': 'y√™u d·∫•u',
            'sweet': 'ng·ªçt ng√†o',
            'lovely': 'ƒë√°ng y√™u',
            'adorable': 'ƒë√°ng y√™u',
            'cute': 'd·ªÖ th∆∞∆°ng',
            'endearing': 'ƒë√°ng y√™u',
            'bewitching': 'm√™ ho·∫∑c',
            'spellbinding': 'm√™ ho·∫∑c',
            'mesmerizing': 'm√™ ho·∫∑c',
            'hypnotic': 'm√™ ho·∫∑c',
            'entrancing': 'm√™ ho·∫∑c',
            'enthralling': 'm√™ ho·∫∑c',
            'engrossing': 'm√™ ho·∫∑c',
            'absorbing': 'm√™ ho·∫∑c',
            'gripping': 'h·∫•p d·∫´n',
            'riveting': 'h·∫•p d·∫´n',
            'compelling': 'h·∫•p d·∫´n',
            'persuasive': 'thuy·∫øt ph·ª•c',
            'convincing': 'thuy·∫øt ph·ª•c',
            'credible': 'ƒë√°ng tin',
            'believable': 'ƒë√°ng tin',
            'plausible': 'h·ª£p l√Ω',
            'logical': 'h·ª£p l√Ω',
            'sensible': 'h·ª£p l√Ω',
            'rational': 'h·ª£p l√Ω',
            'sound': 'v·ªØng ch·∫Øc',
            'solid': 'v·ªØng ch·∫Øc',
            'firm': 'v·ªØng ch·∫Øc',
            'stable': '·ªïn ƒë·ªãnh',
            'steady': '·ªïn ƒë·ªãnh',
            'consistent': 'nh·∫•t qu√°n',
            'reliable': 'ƒë√°ng tin c·∫≠y',
            'dependable': 'ƒë√°ng tin c·∫≠y',
            'trustworthy': 'ƒë√°ng tin c·∫≠y',
            'faithful': 'trung th√†nh',
            'loyal': 'trung th√†nh',
            'devoted': 't·∫≠n t√¢m',
            'dedicated': 't·∫≠n t√¢m',
            'committed': 'cam k·∫øt',
            'determined': 'quy·∫øt t√¢m',
            'resolved': 'quy·∫øt t√¢m',
            'decided': 'quy·∫øt ƒë·ªãnh',
            'settled': '·ªïn ƒë·ªãnh',
            'fixed': 'c·ªë ƒë·ªãnh',
            'established': 'ƒë∆∞·ª£c thi·∫øt l·∫≠p',
            'founded': 'ƒë∆∞·ª£c th√†nh l·∫≠p',
            'created': 'ƒë∆∞·ª£c t·∫°o ra',
            'formed': 'ƒë∆∞·ª£c h√¨nh th√†nh',
            'built': 'ƒë∆∞·ª£c x√¢y d·ª±ng',
            'constructed': 'ƒë∆∞·ª£c x√¢y d·ª±ng',
            'assembled': 'ƒë∆∞·ª£c l·∫Øp r√°p',
            'manufactured': 'ƒë∆∞·ª£c s·∫£n xu·∫•t',
            'produced': 'ƒë∆∞·ª£c s·∫£n xu·∫•t',
            'made': 'ƒë∆∞·ª£c l√†m',
            'crafted': 'ƒë∆∞·ª£c l√†m th·ªß c√¥ng',
            'designed': 'ƒë∆∞·ª£c thi·∫øt k·∫ø',
            'developed': 'ƒë∆∞·ª£c ph√°t tri·ªÉn',
            'invented': 'ƒë∆∞·ª£c ph√°t minh',
            'discovered': 'ƒë∆∞·ª£c kh√°m ph√°',
            'found': 'ƒë∆∞·ª£c t√¨m th·∫•y',
            'located': 'ƒë∆∞·ª£c ƒë·ªãnh v·ªã',
            'situated': 'ƒë∆∞·ª£c ƒë·∫∑t',
            'positioned': 'ƒë∆∞·ª£c ƒë·ªãnh v·ªã',
            'placed': 'ƒë∆∞·ª£c ƒë·∫∑t',
            'set': 'ƒë∆∞·ª£c ƒë·∫∑t',
            'arranged': 'ƒë∆∞·ª£c s·∫Øp x·∫øp',
            'organized': 'ƒë∆∞·ª£c t·ªï ch·ª©c',
            'structured': 'ƒë∆∞·ª£c c·∫•u tr√∫c',
            'systematized': 'ƒë∆∞·ª£c h·ªá th·ªëng h√≥a',
            'standardized': 'ƒë∆∞·ª£c chu·∫©n h√≥a',
            'normalized': 'ƒë∆∞·ª£c chu·∫©n h√≥a',
            'regularized': 'ƒë∆∞·ª£c quy chu·∫©n h√≥a',
            'formalized': 'ƒë∆∞·ª£c ch√≠nh th·ª©c h√≥a',
            'institutionalized': 'ƒë∆∞·ª£c th·ªÉ ch·∫ø h√≥a'
        }
        
        # √Åp d·ª•ng d·ªãch thu·∫≠t
        translated_text = text
        for eng, vn in translation_map.items():
            translated_text = re.sub(r'\b' + re.escape(eng) + r'\b', vn, translated_text, flags=re.IGNORECASE)
        
        return translated_text
    
    def fix_encoding(self, text):
        if not text:
            return text
        
        encoding_fixes = {
            '√ê√£ s? d?ng': 'ƒê√£ s·ª≠ d·ª•ng',
            'Th√©p kh√¥ng g?': 'Th√©p kh√¥ng g·ªâ',
            'T? d?ng': 'T·ª± ƒë·ªông',
            's? d?ng': 's·ª≠ d·ª•ng',
            'kh√¥ng g?': 'kh√¥ng g·ªâ',
            't? d?ng': 't·ª± ƒë·ªông',
            'c? d?ng': 'c·ªï ƒë·ªông',
            'h? th?ng': 'h·ªá th·ªëng',
            'ch?t l??ng': 'ch·∫•t l∆∞·ª£ng',
            'thi?t k?': 'thi·∫øt k·∫ø',
            'c√¥ng ngh?': 'c√¥ng ngh·ªá',
            'th??ng hi?u': 'th∆∞∆°ng hi·ªáu',
            's?n xu?t': 's·∫£n xu·∫•t',
            'b?o h√†nh': 'b·∫£o h√†nh',
            'ch?ng n??c': 'ch·ªëng n∆∞·ªõc',
            'ch?ng x??c': 'ch·ªëng x∆∞·ªõc',
            'ch?ng va': 'ch·ªëng va',
            'ch?ng s?c': 'ch·ªëng s·ªëc',
            'ch?ng t?': 'ch·ªëng t·ª´',
            'ch?ng nhi?t': 'ch·ªëng nhi·ªát',
            'ch?ng b?i': 'ch·ªëng b·ª•i',
            'ch?ng m?': 'ch·ªëng m·ªù',
            'ch?ng ph?n quang': 'ch·ªëng ph·∫£n quang',
            'ch?ng tia UV': 'ch·ªëng tia UV',
            'ch?ng tia X': 'ch·ªëng tia X',
            'ch?ng tia gamma': 'ch·ªëng tia gamma',
            'ch?ng tia beta': 'ch·ªëng tia beta',
            'ch?ng tia alpha': 'ch·ªëng tia alpha',
            'ch?ng tia neutron': 'ch·ªëng tia neutron',
            'ch?ng tia proton': 'ch·ªëng tia proton',
            'ch?ng tia electron': 'ch·ªëng tia electron',
            'ch?ng tia positron': 'ch·ªëng tia positron',
            'ch?ng tia neutrino': 'ch·ªëng tia neutrino',
            'ch?ng tia muon': 'ch·ªëng tia muon',
            'ch?ng tia pion': 'ch·ªëng tia pion',
            'ch?ng tia kaon': 'ch·ªëng tia kaon',
            'ch?ng tia lambda': 'ch·ªëng tia lambda',
            'ch?ng tia sigma': 'ch·ªëng tia sigma',
            'ch?ng tia xi': 'ch·ªëng tia xi',
            'ch?ng tia omega': 'ch·ªëng tia omega',
            'ch?ng tia delta': 'ch·ªëng tia delta',
            'ch?ng tia phi': 'ch·ªëng tia phi',
            'ch?ng tia eta': 'ch·ªëng tia eta',
            'ch?ng tia rho': 'ch·ªëng tia rho',
            'ch?ng tia j/psi': 'ch·ªëng tia j/psi',
            'ch?ng tia upsilon': 'ch·ªëng tia upsilon',
            'ch?ng tia z': 'ch·ªëng tia z',
            'ch?ng tia w': 'ch·ªëng tia w',
            'ch?ng tia gluon': 'ch·ªëng tia gluon',
            'ch?ng tia photon': 'ch·ªëng tia photon',
            'ch?ng tia graviton': 'ch·ªëng tia graviton',
            'ch?ng tia higgs': 'ch·ªëng tia higgs',
            'ch?ng tia axion': 'ch·ªëng tia axion',
            'ch?ng tia majorana': 'ch·ªëng tia majorana',
            'ch?ng tia weyl': 'ch·ªëng tia weyl',
            'ch?ng tia dirac': 'ch·ªëng tia dirac',
            'ch?ng tia fermi': 'ch·ªëng tia fermi',
            'ch?ng tia bose': 'ch·ªëng tia bose',
            'ch?ng tia einstein': 'ch·ªëng tia einstein',
            'ch?ng tia planck': 'ch·ªëng tia planck',
            'ch?ng tia bohr': 'ch·ªëng tia bohr',
            'ch?ng tia heisenberg': 'ch·ªëng tia heisenberg',
            'ch?ng tia schrodinger': 'ch·ªëng tia schrodinger',
            'ch?ng tia pauli': 'ch·ªëng tia pauli'
        }
        
        fixed_text = text
        for corrupted, fixed in encoding_fixes.items():
            fixed_text = fixed_text.replace(corrupted, fixed)
        
        return fixed_text
    
    def convert_price_to_vnd(self, price_str):
        try:
            if not price_str or price_str == 'NULL':
                return None
            
            price = re.sub(r'[^\d.]', '', str(price_str))
            if not price:
                return None
            
            price_float = float(price)
            
            if price_float < 100000:
                return int(price_float * 24500)
            
            return int(price_float)
            
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói chuy·ªÉn ƒë·ªïi gi√° {price_str}: {e}")
            return None
    
    def update_database(self, products_data):
        try:
            cursor = self.conn.cursor()
            
            print(f"\nüîÑ C·∫¨P NH·∫¨T DATABASE: {len(products_data)} s·∫£n ph·∫©m")
            print("=" * 50)
            
            updated_count = 0
            for i, product in enumerate(products_data):
                try:
                    # D·ªãch c√°c tr∆∞·ªùng text
                    translated_condition = self.translate_text(product.get('Condition', ''))
                    translated_gender = self.translate_text(product.get('Gender', ''))
                    translated_description = self.translate_text(product.get('Description', ''))
                    translated_certificate = self.translate_text(product.get('Certificate', ''))
                    translated_warranty = self.translate_text(product.get('WarrantyInfo', ''))
                    
                    # Chuy·ªÉn ƒë·ªïi gi√°
                    price_vnd = self.convert_price_to_vnd(product.get('Price'))
                    capital_price_vnd = self.convert_price_to_vnd(product.get('CapitalPrice'))
                    credit_card_price_vnd = self.convert_price_to_vnd(product.get('CreditCardPrice'))
                    
                    # C·∫≠p nh·∫≠t database
                    cursor.execute("""
                        UPDATE Products 
                        SET Condition = ?, Gender = ?, Description = ?, 
                            Certificate = ?, WarrantyInfo = ?, Price = ?, 
                            CapitalPrice = ?, CreditCardPrice = ?
                        WHERE Id = ?
                    """, (
                        translated_condition, translated_gender, translated_description,
                        translated_certificate, translated_warranty, price_vnd,
                        capital_price_vnd, credit_card_price_vnd, product.get('Id')
                    ))
                    
                    if cursor.rowcount > 0:
                        updated_count += 1
                        if i < 10:
                            print(f"  ‚úÖ ID {product.get('Id')}: {product.get('Name', 'N/A')}")
                    
                except Exception as e:
                    print(f"  ‚ö†Ô∏è L·ªói c·∫≠p nh·∫≠t s·∫£n ph·∫©m {product.get('Id')}: {e}")
                    continue
            
            self.conn.commit()
            print(f"\n‚úÖ ƒê√£ c·∫≠p nh·∫≠t {updated_count} s·∫£n ph·∫©m!")
            
            cursor.close()
            return updated_count
            
        except Exception as e:
            print(f"‚ùå L·ªói c·∫≠p nh·∫≠t database: {e}")
            self.conn.rollback()
            return 0
    
    def verify_results(self):
        try:
            cursor = self.conn.cursor()
            
            print("\n‚úÖ X√ÅC MINH K·∫æT QU·∫¢:")
            print("=" * 50)
            
            cursor.execute("""
                SELECT TOP 3 Id, Name, Model, Condition, Gender, 
                       SUBSTRING(Description, 1, 150) as Description_Short,
                       Price, CapitalPrice, CreditCardPrice
                FROM Products
                ORDER BY Id
            """)
            
            products = cursor.fetchall()
            print("üì¶ SAMPLE PRODUCTS:")
            for product in products:
                print(f"  ID: {product[0]}")
                print(f"  Name: {product[1]}")
                print(f"  Model: {product[2]}")
                print(f"  Condition: {product[3]}")
                print(f"  Gender: {product[4]}")
                print(f"  Description: {product[5]}...")
                print(f"  Price: {product[6]:,.0f} VND" if product[6] else "  Price: NULL")
                print(f"  CapitalPrice: {product[7]:,.0f} VND" if product[7] else "  CapitalPrice: NULL")
                print(f"  CreditCardPrice: {product[8]:,.0f} VND" if product[8] else "  CreditCardPrice: NULL")
                print("  " + "-" * 40)
            
            cursor.close()
            
        except Exception as e:
            print(f"‚ùå L·ªói x√°c minh: {e}")
    
    def run_translation(self):
        print("üöÄ B·∫ÆT ƒê·∫¶U D·ªäCH THU·∫¨T T·ª™ FILE PRODUCTS.SQL")
        print("=" * 60)
        
        if not self.connect():
            return False
        
        try:
            # ƒê·ªçc d·ªØ li·ªáu t·ª´ file SQL
            products_data = self.read_sql_file()
            if not products_data:
                return False
            
            # C·∫≠p nh·∫≠t database
            updated_count = self.update_database(products_data)
            
            # X√°c minh k·∫øt qu·∫£
            self.verify_results()
            
            print(f"\nüéâ HO√ÄN TH√ÄNH!")
            print("=" * 60)
            print(f"‚úÖ ƒê√£ ƒë·ªçc {len(products_data)} s·∫£n ph·∫©m t·ª´ file SQL")
            print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t {updated_count} s·∫£n ph·∫©m v√†o database")
            print("‚úÖ ƒê√£ d·ªãch to√†n b·ªô n·ªôi dung sang ti·∫øng Vi·ªát")
            print("‚úÖ ƒê√£ s·ª≠a l·ªói encoding")
            print("‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi gi√° sang VND")
            
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return False
        finally:
            self.close()

def main():
    connection_string = "DRIVER={SQL Server};SERVER=localhost;DATABASE=Shopping_Demo;Trusted_Connection=yes;"
    sql_file_path = "Products.sql"
    
    translator = SQLTranslator(connection_string, sql_file_path)
    success = translator.run_translation()
    
    if success:
        print("\nüéØ K·∫æT QU·∫¢: Th√†nh c√¥ng!")
    else:
        print("\nüí• K·∫æT QU·∫¢: Th·∫•t b·∫°i!")

if __name__ == "__main__":
    main()
